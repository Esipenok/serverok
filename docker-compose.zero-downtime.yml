version: '3.8'

services:
  # MongoDB сервис (без изменений)
  mongodb:
    image: mongo:7.0
    container_name: dating_app_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-dating_app}
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - app-network

  # Redis сервис
  redis:
    image: redis:7
    container_name: dating_app_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - app-network

  # Zookeeper для Kafka (Bitnami)
  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: dating_app_zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app-network

  # Kafka брокер (Bitnami)
  kafka:
    image: bitnami/kafka:3.6
    container_name: dating_app_kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - app-network

  # Node.js сервер (оптимизированный для zero-downtime)
  app:
    image: node:18
    container_name: dating_app_server
    restart: unless-stopped
    working_dir: /app
    command: bash -c "npm install --production && node server.js"
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/${MONGO_DATABASE:-dating_app}?authSource=admin
      JWT_SECRET: ${JWT_SECRET:-your_secret_key}
      JWT_EXPIRE: ${JWT_EXPIRE:-7d}
      BASE_URL: https://willowe.love
      STATIC_URL: https://willowe.love
      REDIS_URL: redis://redis:6379
      KAFKA_BROKER: kafka:9092
    ports:
      - "3000:3000"
    volumes:
      # Монтируем код через символическую ссылку current
      - /app/current:/app
      # Монтируем общие данные
      - /app/shared/uploads:/app/uploads
      - /app/shared/logs:/app/logs
      - /app/shared/ssl:/app/ssl
      - /app/shared/.env:/app/.env
    depends_on:
      - mongodb
      - redis
      - kafka
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  mongodb_data:
    driver: local

networks:
  app-network:
    driver: bridge 