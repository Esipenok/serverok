const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const path = require('path');
const http = require('http');
const socketIo = require('socket.io');
const cron = require('node-cron');
const SSHClient = require('./ssh-client');
const StatsManager = require('./stats-manager');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

// Middleware
app.use(helmet());
app.use(cors());
app.use(morgan('combined'));
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const PORT = process.env.PORT || 3001;
const MAIN_APP_URL = process.env.MAIN_APP_URL || 'http://46.62.131.90:3000';
const ADMIN_USERNAME = process.env.ADMIN_USERNAME || 'admin';
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || 'qwe';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SSH –∫–ª–∏–µ–Ω—Ç–∞ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const sshClient = new SSHClient();
const statsManager = new StatsManager();

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const checkAuth = (req, res, next) => {
  const username = req.headers['x-admin-username'] || req.query.username;
  const password = req.headers['x-admin-password'] || req.query.password;
  
  console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:');
  console.log('  - –ü–æ–ª—É—á–µ–Ω–Ω—ã–π username:', username);
  console.log('  - –ü–æ–ª—É—á–µ–Ω–Ω—ã–π password:', password ? '***' : '–Ω–µ —É–∫–∞–∑–∞–Ω');
  console.log('  - –û–∂–∏–¥–∞–µ–º—ã–π username:', ADMIN_USERNAME);
  console.log('  - –û–∂–∏–¥–∞–µ–º—ã–π password:', ADMIN_PASSWORD);
  console.log('  - Headers:', req.headers);
  console.log('  - Query:', req.query);
  
  if (username !== ADMIN_USERNAME || password !== ADMIN_PASSWORD) {
    console.log('‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å!');
    console.log('  - Username —Å–æ–≤–ø–∞–¥–∞–µ—Ç:', username === ADMIN_USERNAME);
    console.log('  - Password —Å–æ–≤–ø–∞–¥–∞–µ—Ç:', password === ADMIN_PASSWORD);
    return res.status(401).json({ 
      error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
      debug: {
        receivedUsername: username,
        receivedPassword: password ? '***' : '–Ω–µ —É–∫–∞–∑–∞–Ω',
        expectedUsername: ADMIN_USERNAME,
        usernameMatch: username === ADMIN_USERNAME,
        passwordMatch: password === ADMIN_PASSWORD
      }
    });
  }
  
  console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
  next();
};

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/api/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.get('/api/auth-debug', (req, res) => {
  console.log('üîç –ó–∞–ø—Ä–æ—Å –æ—Ç–ª–∞–¥–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
  console.log('  - Headers:', req.headers);
  console.log('  - Query:', req.query);
  console.log('  - Body:', req.body);
  
  res.json({
    message: '–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
    environment: {
      ADMIN_USERNAME: ADMIN_USERNAME,
      ADMIN_PASSWORD: ADMIN_PASSWORD ? '***' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
      NODE_ENV: process.env.NODE_ENV,
      PORT: process.env.PORT
    },
    request: {
      headers: req.headers,
      query: req.query,
      body: req.body
    },
    timestamp: new Date().toISOString()
  });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
app.get('/api/ssh-test', checkAuth, async (req, res) => {
  try {
    const isConnected = await sshClient.testConnection();
    res.json({ 
      success: isConnected, 
      message: isConnected ? 'SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç' : 'SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SSH:', error);
    res.status(500).json({ 
      success: false, 
      error: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SSH: ' + error.message 
    });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/stats', checkAuth, (req, res) => {
  try {
    const stats = statsManager.getStatsForCharts();
    res.json(stats);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/stats-summary', checkAuth, (req, res) => {
  try {
    const summary = statsManager.getSummaryStats();
    res.json(summary);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/server-status', checkAuth, async (req, res) => {
  try {
    const serverStatus = await sshClient.getServerStatus();
    res.json(serverStatus);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–±
app.get('/api/complaints', checkAuth, async (req, res) => {
  try {
    const axios = require('axios');
    
    // –ü–æ–ª—É—á–∞–µ–º –∂–∞–ª–æ–±—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const response = await axios.get(`${MAIN_APP_URL}/api/complaints`, {
      headers: {
        'Authorization': `Bearer ${ADMIN_PASSWORD}`,
        'Content-Type': 'application/json'
      }
    });

    res.json(response.data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–±:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–±' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∂–∞–ª–æ–±
app.get('/api/all-complaints', checkAuth, async (req, res) => {
  try {
    const axios = require('axios');
    
    const response = await axios.get(`${MAIN_APP_URL}/api/complaints/all`, {
      headers: {
        'x-admin-password': ADMIN_PASSWORD,
        'Content-Type': 'application/json'
      }
    });

    res.json(response.data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∂–∞–ª–æ–±:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∂–∞–ª–æ–±' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∂–∞–ª–æ–±
app.get('/api/complaints-stats', checkAuth, async (req, res) => {
  try {
    const axios = require('axios');
    
    const response = await axios.get(`${MAIN_APP_URL}/api/complaints/stats`, {
      headers: {
        'x-admin-password': ADMIN_PASSWORD,
        'Content-Type': 'application/json'
      }
    });

    res.json(response.data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∂–∞–ª–æ–±:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∂–∞–ª–æ–±' });
  }
});

// WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
io.on('connection', (socket) => {
  console.log('–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏');
  
  socket.on('disconnect', () => {
    console.log('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏');
  });
});

// Cron –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
cron.schedule('* * * * *', async () => {
  try {
    const serverStatus = await sshClient.getServerStatus();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    statsManager.addDataPoint(serverStatus.timestamp, serverStatus.system);
    
    const statusData = {
      timestamp: serverStatus.timestamp,
      system: serverStatus.system
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    io.emit('server-status-update', statusData);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = statsManager.getStatsForCharts();
    io.emit('stats-update', stats);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
  }
});

// Cron –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–π —á–∞—Å
cron.schedule('0 * * * *', () => {
  statsManager.cleanup();
  console.log('–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, () => {
  console.log(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
  console.log(`SSH —Å–µ—Ä–≤–µ—Ä: ${sshClient.config.host}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.on('SIGINT', async () => {
  console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
  await sshClient.disconnect();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
  await sshClient.disconnect();
  process.exit(0);
}); 