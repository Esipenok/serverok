// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let socket;
let cpuChart, memoryChart, diskChart;
let cpuTrendChart, memoryTrendChart, diskTrendChart;
let currentTab = 'status';
let currentUser = null;
let adminCredentials = {
    username: 'admin',
    password: 'qwe'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    setupLoginForm();
    checkAuthStatus();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
function setupLoginForm() {
    const loginForm = document.getElementById('login-form');
    const usernameInput = document.getElementById('username');
    const passwordInput = document.getElementById('password');
    
    loginForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const username = usernameInput.value.trim();
        const password = passwordInput.value;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const submitBtn = loginForm.querySelector('button[type="submit"]');
        const originalText = submitBtn.textContent;
        submitBtn.textContent = '–ü—Ä–æ–≤–µ—Ä–∫–∞...';
        submitBtn.disabled = true;
        
        try {
            const isAuthenticated = await authenticateUser(username, password);
            if (isAuthenticated) {
                loginSuccess(username);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–µ –≤—Ö–æ–¥–∞:', error);
            showLoginError(`–û—à–∏–±–∫–∞: ${error.message}`);
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            submitBtn.textContent = originalText;
            submitBtn.disabled = false;
        }
    });
    
    // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –ª–æ–≥–∏–Ω–∞
    usernameInput.focus();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ –ø–æ–ª—è—Ö
    usernameInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            passwordInput.focus();
        }
    });
    
    passwordInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            loginForm.dispatchEvent(new Event('submit'));
        }
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function checkAuthStatus() {
    const savedUser = localStorage.getItem('admin_user');
    const savedTimestamp = localStorage.getItem('admin_timestamp');
    
    if (savedUser && savedTimestamp) {
        const now = Date.now();
        const sessionTime = 8 * 60 * 60 * 1000; // 8 —á–∞—Å–æ–≤
        
        if (now - parseInt(savedTimestamp) < sessionTime) {
            // –°–µ—Å—Å–∏—è –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
            currentUser = savedUser;
            loginSuccess(savedUser, false);
        } else {
            // –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞
            localStorage.removeItem('admin_user');
            localStorage.removeItem('admin_timestamp');
            showLoginModal();
        }
    } else {
        showLoginModal();
    }
}

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function authenticateUser(username, password) {
    try {
        console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', { username, password: '***' });
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const debugResponse = await fetch('/admin/api/auth-debug');
        const debugData = await debugResponse.json();
        console.log('üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', debugData);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const localAuth = username === adminCredentials.username && password === adminCredentials.password;
        console.log('üîç –õ–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:', localAuth);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API
        const response = await fetch('/admin/api/ssh-test', {
            headers: {
                'x-admin-username': username,
                'x-admin-password': password,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('üîç API –æ—Ç–≤–µ—Ç —Å—Ç–∞—Ç—É—Å:', response.status);
        
        if (response.ok) {
            console.log('‚úÖ API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
            return true;
        } else {
            const errorData = await response.json();
            console.log('‚ùå API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', errorData);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            showLoginError(`–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${errorData.error}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.`);
            return false;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        showLoginError(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
        return false;
    }
}

// –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
function loginSuccess(username, saveSession = true) {
    currentUser = username;
    
    if (saveSession) {
        localStorage.setItem('admin_user', username);
        localStorage.setItem('admin_timestamp', Date.now().toString());
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    document.getElementById('login-modal').style.display = 'none';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–Ω–µ–ª—å
    document.getElementById('main-container').style.display = 'flex';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    document.getElementById('current-user').textContent = username;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª—å
    initializePanel();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –≤—Ö–æ–¥–∞
function showLoginError(message) {
    const errorElement = document.getElementById('login-error');
    const errorMessage = document.getElementById('error-message');
    
    errorMessage.textContent = message;
    errorElement.style.display = 'flex';
    
    // –°–∫—Ä—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        errorElement.style.display = 'none';
    }, 3000);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
function showLoginModal() {
    document.getElementById('login-modal').style.display = 'flex';
    document.getElementById('main-container').style.display = 'none';
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
    document.getElementById('username').value = '';
    document.getElementById('password').value = '';
    document.getElementById('login-error').style.display = 'none';
}

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
function logout() {
    currentUser = null;
    localStorage.removeItem('admin_user');
    localStorage.removeItem('admin_timestamp');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if (socket) {
        socket.disconnect();
    }
    
    showLoginModal();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
function initializePanel() {
    initializeSocket();
    initializeCharts();
    initializeTrendCharts();
    setupTabNavigation();
    setupFilters();
    loadInitialData();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ç—Ä–µ–Ω–¥–æ–≤
function initializeTrendCharts() {
    const chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                display: false
            }
        },
        scales: {
            x: {
                display: true,
                title: {
                    display: true,
                    text: '–í—Ä–µ–º—è'
                },
                grid: {
                    color: 'rgba(0,0,0,0.1)'
                }
            },
            y: {
                display: true,
                title: {
                    display: true,
                    text: '–ü—Ä–æ—Ü–µ–Ω—Ç (%)'
                },
                min: 0,
                max: 100,
                grid: {
                    color: 'rgba(0,0,0,0.1)'
                }
            }
        },
        elements: {
            point: {
                radius: 3,
                hoverRadius: 5
            },
            line: {
                tension: 0.4
            }
        }
    };

    // CPU —Ç—Ä–µ–Ω–¥ –≥—Ä–∞—Ñ–∏–∫
    const cpuTrendCtx = document.getElementById('cpu-trend-chart').getContext('2d');
    cpuTrendChart = new Chart(cpuTrendCtx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: 'CPU (%)',
                data: [],
                borderColor: '#ff6b6b',
                backgroundColor: 'rgba(255, 107, 107, 0.1)',
                borderWidth: 2,
                fill: true
            }]
        },
        options: chartOptions
    });

    // Memory —Ç—Ä–µ–Ω–¥ –≥—Ä–∞—Ñ–∏–∫
    const memoryTrendCtx = document.getElementById('memory-trend-chart').getContext('2d');
    memoryTrendChart = new Chart(memoryTrendCtx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: 'Memory (%)',
                data: [],
                borderColor: '#4834d4',
                backgroundColor: 'rgba(72, 52, 212, 0.1)',
                borderWidth: 2,
                fill: true
            }]
        },
        options: chartOptions
    });

    // Disk —Ç—Ä–µ–Ω–¥ –≥—Ä–∞—Ñ–∏–∫
    const diskTrendCtx = document.getElementById('disk-trend-chart').getContext('2d');
    diskTrendChart = new Chart(diskTrendCtx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: 'Disk (%)',
                data: [],
                borderColor: '#00b894',
                backgroundColor: 'rgba(0, 184, 148, 0.1)',
                borderWidth: 2,
                fill: true
            }]
        },
        options: chartOptions
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
function initializeSocket() {
    socket = io();
    
    socket.on('connect', () => {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É');
    });
    
    socket.on('server-status-update', (data) => {
        updateSystemMetrics(data.system);
    });
    
    socket.on('stats-update', (stats) => {
        updateTrendCharts(stats);
    });
    
    socket.on('disconnect', () => {
        console.log('–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä—É–≥–æ–≤—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º
function initializeCharts() {
    const chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                position: 'bottom',
                labels: {
                    padding: 20,
                    usePointStyle: true
                }
            }
        }
    };

    // CPU –¥–∏–∞–≥—Ä–∞–º–º–∞
    const cpuCtx = document.getElementById('cpu-chart').getContext('2d');
    cpuChart = new Chart(cpuCtx, {
        type: 'doughnut',
        data: {
            labels: ['–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ', '–°–≤–æ–±–æ–¥–Ω–æ'],
            datasets: [{
                data: [0, 100],
                backgroundColor: ['#ff6b6b', '#f8f9fa'],
                borderWidth: 0
            }]
        },
        options: chartOptions
    });

    // Memory –¥–∏–∞–≥—Ä–∞–º–º–∞
    const memoryCtx = document.getElementById('memory-chart').getContext('2d');
    memoryChart = new Chart(memoryCtx, {
        type: 'doughnut',
        data: {
            labels: ['–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ', '–°–≤–æ–±–æ–¥–Ω–æ'],
            datasets: [{
                data: [0, 100],
                backgroundColor: ['#4834d4', '#f8f9fa'],
                borderWidth: 0
            }]
        },
        options: chartOptions
    });

    // Disk –¥–∏–∞–≥—Ä–∞–º–º–∞
    const diskCtx = document.getElementById('disk-chart').getContext('2d');
    diskChart = new Chart(diskCtx, {
        type: 'doughnut',
        data: {
            labels: ['–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ', '–°–≤–æ–±–æ–¥–Ω–æ'],
            datasets: [{
                data: [0, 100],
                backgroundColor: ['#00b894', '#f8f9fa'],
                borderWidth: 0
            }]
        },
        options: chartOptions
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≤–∫–ª–∞–¥–∫–∞–º
function setupTabNavigation() {
  const navLinks = document.querySelectorAll('.nav-link');
  
  navLinks.forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      
      // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
      navLinks.forEach(l => l.classList.remove('active'));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ —Ç–µ–∫—É—â–µ–π —Å—Å—ã–ª–∫–µ
      link.classList.add('active');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É
      const tabName = link.getAttribute('data-tab');
      showTab(tabName);
    });
  });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function setupFilters() {
  const typeFilter = document.getElementById('type-filter');
  const categoryFilter = document.getElementById('category-filter');
  
  if (typeFilter) {
    typeFilter.addEventListener('change', filterComplaints);
  }
  
  if (categoryFilter) {
    categoryFilter.addEventListener('change', filterComplaints);
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤–∫–ª–∞–¥–∫—É
function showTab(tabName) {
  // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
  document.querySelectorAll('.tab-content').forEach(tab => {
    tab.style.display = 'none';
  });
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
  const targetTab = document.getElementById(tabName + '-tab');
  if (targetTab) {
    targetTab.style.display = 'block';
  }
  
  currentTab = tabName;
  
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
    if (tabName === 'status') {
        refreshServerStatus();
        refreshStats();
    } else if (tabName === 'complaints') {
        refreshComplaints();
        refreshComplaintsStats();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function loadInitialData() {
    refreshServerStatus();
    refreshStats();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ç—Ä–µ–Ω–¥–æ–≤
function updateTrendCharts(stats) {
    if (stats.cpu) {
        cpuTrendChart.data.labels = stats.cpu.labels;
        cpuTrendChart.data.datasets[0].data = stats.cpu.data;
        cpuTrendChart.update('none');
    }
    
    if (stats.memory) {
        memoryTrendChart.data.labels = stats.memory.labels;
        memoryTrendChart.data.datasets[0].data = stats.memory.data;
        memoryTrendChart.update('none');
    }
    
    if (stats.disk) {
        diskTrendChart.data.labels = stats.disk.labels;
        diskTrendChart.data.datasets[0].data = stats.disk.data;
        diskTrendChart.update('none');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function refreshStats() {
    try {
        const [statsResponse, summaryResponse] = await Promise.all([
                    fetch(`/admin/api/stats?username=${adminCredentials.username}&password=${adminCredentials.password}`),
        fetch(`/admin/api/stats-summary?username=${adminCredentials.username}&password=${adminCredentials.password}`)
        ]);

        if (statsResponse.ok) {
            const stats = await statsResponse.json();
            updateTrendCharts(stats);
        }

        if (summaryResponse.ok) {
            const summary = await summaryResponse.json();
            updateStatsSummary(summary);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStatsSummary(summary) {
    if (summary.cpu) {
        document.getElementById('cpu-current').textContent = summary.cpu.current.toFixed(1);
        document.getElementById('cpu-average').textContent = summary.cpu.average.toFixed(1);
        document.getElementById('cpu-max').textContent = summary.cpu.max.toFixed(1);
    }
    
    if (summary.memory) {
        document.getElementById('memory-current').textContent = summary.memory.current.toFixed(1);
        document.getElementById('memory-average').textContent = summary.memory.average.toFixed(1);
        document.getElementById('memory-max').textContent = summary.memory.max.toFixed(1);
    }
    
    if (summary.disk) {
        document.getElementById('disk-current').textContent = summary.disk.current.toFixed(1);
        document.getElementById('disk-average').textContent = summary.disk.average.toFixed(1);
        document.getElementById('disk-max').textContent = summary.disk.max.toFixed(1);
    }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function testSSHConnection() {
  try {
    const response = await fetch(`/admin/api/ssh-test?username=${adminCredentials.username}&password=${adminCredentials.password}`);
    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SSH');
    }
    
    const data = await response.json();
    
    if (data.success) {
      alert('‚úÖ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    } else {
      alert('‚ùå SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ' + (data.error || data.message));
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SSH:', error);
    alert('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SSH: ' + error.message);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function refreshServerStatus() {
  try {
    const response = await fetch(`/admin/api/server-status?username=${adminCredentials.username}&password=${adminCredentials.password}`);
    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
    
    const data = await response.json();
    updateSystemMetrics(data.system);
    updateDockerTable(data.docker.containers);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    showError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–∞');
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
function updateSystemMetrics(system) {
    // CPU
    const cpuLoad = system.cpu.load.toFixed(1);
    document.getElementById('cpu-load').textContent = cpuLoad + '%';
    document.getElementById('cpu-progress').style.width = cpuLoad + '%';
    
    // Memory
    const memoryPercent = parseFloat(system.memory.usedPercent);
    document.getElementById('memory-usage').textContent = memoryPercent + '%';
    document.getElementById('memory-progress').style.width = memoryPercent + '%';
    
    // Disk (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–∏—Å–∫)
    const diskPercent = system.disk[0] ? parseFloat(system.disk[0].usedPercent) : 0;
    document.getElementById('disk-usage').textContent = diskPercent + '%';
    document.getElementById('disk-progress').style.width = diskPercent + '%';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—ã
    updateChart(cpuChart, cpuLoad, 100 - cpuLoad);
    updateChart(memoryChart, memoryPercent, 100 - memoryPercent);
    updateChart(diskChart, diskPercent, 100 - diskPercent);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
function updateChart(chart, used, free) {
    chart.data.datasets[0].data = [used, free];
    chart.update();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
function updateDockerTable(containers) {
    const container = document.getElementById('docker-table-container');
    
    if (!containers || containers.length === 0) {
        container.innerHTML = '<p style="text-align: center; color: #666; padding: 20px;">–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤</p>';
        return;
    }
    
    let tableHTML = `
        <table class="table">
            <thead>
                <tr>
                    <th>–ò–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–ü–æ—Ä—Ç—ã</th>
                </tr>
            </thead>
            <tbody>
    `;
    
    containers.forEach(container => {
        const statusClass = container.status.includes('Up') ? 'status-running' : 'status-stopped';
        const statusText = container.status.includes('Up') ? '–ó–∞–ø—É—â–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
        
        tableHTML += `
            <tr>
                <td>${container.name}</td>
                <td><span class="status-badge ${statusClass}">${statusText}</span></td>
                <td>${container.ports || '-'}</td>
            </tr>
        `;
    });
    
    tableHTML += '</tbody></table>';
    container.innerHTML = tableHTML;
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∂–∞–ª–æ–±
let allComplaints = [];
let complaintsStats = {};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∂–∞–ª–æ–±
async function refreshComplaints() {
  try {
    const response = await fetch(`/admin/api/all-complaints?username=${adminCredentials.username}&password=${adminCredentials.password}`);
    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–±');
    }
    
    allComplaints = await response.json();
    updateComplaintsList(allComplaints);
    updateComplaintsCount(allComplaints.length);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∂–∞–ª–æ–±:', error);
    showComplaintsPlaceholder();
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∂–∞–ª–æ–±
async function refreshComplaintsStats() {
  try {
    const response = await fetch(`/admin/api/complaints-stats?username=${adminCredentials.username}&password=${adminCredentials.password}`);
    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∂–∞–ª–æ–±');
    }
    
    complaintsStats = await response.json();
    updateComplaintsStats(complaintsStats);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∂–∞–ª–æ–±:', error);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function updateComplaintsStats(stats) {
  document.getElementById('total-complaints').textContent = stats.total || 0;
  document.getElementById('today-complaints').textContent = stats.today || 0;
  document.getElementById('active-complaints').textContent = stats.total || 0; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–µ
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∂–∞–ª–æ–±
function updateComplaintsCount(count) {
  document.getElementById('complaints-count').textContent = `–ü–æ–∫–∞–∑–∞–Ω–æ: ${count} –∂–∞–ª–æ–±`;
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∂–∞–ª–æ–±
function filterComplaints() {
  const typeFilter = document.getElementById('type-filter').value;
  const categoryFilter = document.getElementById('category-filter').value;
  
  let filteredComplaints = allComplaints;
  
  if (typeFilter) {
    filteredComplaints = filteredComplaints.filter(complaint => 
      complaint.complaintType === typeFilter
    );
  }
  
  if (categoryFilter) {
    filteredComplaints = filteredComplaints.filter(complaint => 
      complaint.type === categoryFilter
    );
  }
  
  updateComplaintsList(filteredComplaints);
  updateComplaintsCount(filteredComplaints.length);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∂–∞–ª–æ–±
function updateComplaintsList(complaints) {
    const container = document.getElementById('complaints-container');
    
    if (!complaints || complaints.length === 0) {
        container.innerHTML = '<p style="text-align: center; color: #666; padding: 20px;">–ñ–∞–ª–æ–± –ø–æ–∫–∞ –Ω–µ—Ç</p>';
        return;
    }
    
    let complaintsHTML = '';
    
    complaints.forEach(complaint => {
        const date = new Date(complaint.createdAt).toLocaleString('ru-RU');
        
        complaintsHTML += `
            <div class="complaint-item">
                <div class="complaint-header">
                    <span class="complaint-type">${getComplaintTypeText(complaint.complaintType)}</span>
                    <span class="complaint-date">${date}</span>
                </div>
                <div class="complaint-text">${complaint.complaintText}</div>
                <div class="complaint-meta">
                    <span><strong>–û—Ç:</strong> ${complaint.senderEmail}</span>
                    <span><strong>–ù–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong> ${complaint.reportedUserId}</span>
                    <span><strong>–¢–∏–ø:</strong> ${getComplaintCategoryText(complaint.type)}</span>
                </div>
            </div>
        `;
    });
    
    container.innerHTML = complaintsHTML;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –∂–∞–ª–æ–±
function showComplaintsPlaceholder() {
    const container = document.getElementById('complaints-container');
    container.innerHTML = `
        <div style="text-align: center; padding: 40px; color: #666;">
            <i class="fas fa-info-circle" style="font-size: 48px; margin-bottom: 20px; color: #667eea;"></i>
            <h3>Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–± –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</h3>
            <p>–î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∂–∞–ª–æ–± –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å endpoint /api/complaints/all –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</p>
            <p>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–±</p>
        </div>
    `;
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ç–∏–ø–∞ –∂–∞–ª–æ–±—ã
function getComplaintTypeText(type) {
    const types = {
        'SPAM': '–°–ø–∞–º',
        'FAKE_PROFILE': '–§–µ–π–∫–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å',
        'INSULT': '–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è',
        'HARASSMENT': '–î–æ–º–æ–≥–∞—Ç–µ–ª—å—Å—Ç–≤–∞',
        'SCAM': '–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ',
        'OTHER': '–î—Ä—É–≥–æ–µ',
        'IMPROVEMENTS': '–£–ª—É—á—à–µ–Ω–∏—è',
        'ISSUES': '–ü—Ä–æ–±–ª–µ–º—ã'
    };
    return types[type] || type;
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∂–∞–ª–æ–±—ã
function getComplaintCategoryText(category) {
    const categories = {
        'complain': '–ñ–∞–ª–æ–±–∞',
        'improve_and_problem': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–ü—Ä–æ–±–ª–µ–º–∞'
    };
    return categories[category] || category;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
function showError(message) {
    const container = document.getElementById(currentTab === 'status' ? 'docker-table-container' : 'complaints-container');
    container.innerHTML = `
        <div style="text-align: center; padding: 40px; color: #dc3545;">
            <i class="fas fa-exclamation-triangle" style="font-size: 48px; margin-bottom: 20px;"></i>
            <h3>–û—à–∏–±–∫–∞</h3>
            <p>${message}</p>
        </div>
    `;
}

// –≠–∫—Å–ø–æ—Ä—Ç –∂–∞–ª–æ–± –≤ CSV
function exportComplaintsToCSV() {
  const typeFilter = document.getElementById('type-filter').value;
  const categoryFilter = document.getElementById('category-filter').value;
  
  let complaintsToExport = allComplaints;
  
  if (typeFilter) {
    complaintsToExport = complaintsToExport.filter(complaint => 
      complaint.complaintType === typeFilter
    );
  }
  
  if (categoryFilter) {
    complaintsToExport = complaintsToExport.filter(complaint => 
      complaint.type === categoryFilter
    );
  }
  
  if (complaintsToExport.length === 0) {
    alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º CSV –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const headers = [
    '–î–∞—Ç–∞',
    '–¢–∏–ø –∂–∞–ª–æ–±—ã',
    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
    'Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è',
    'ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è',
    'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    '–¢–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã'
  ];
  
  // –°–æ–∑–¥–∞–µ–º CSV –¥–∞–Ω–Ω—ã–µ
  const csvData = complaintsToExport.map(complaint => [
    new Date(complaint.createdAt).toLocaleString('ru-RU'),
    getComplaintTypeText(complaint.complaintType),
    getComplaintCategoryText(complaint.type),
    complaint.senderEmail,
    complaint.senderId,
    complaint.reportedUserId,
    `"${complaint.complaintText.replace(/"/g, '""')}"` // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏
  ]);
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ
  const csvContent = [headers, ...csvData]
    .map(row => row.join(','))
    .join('\n');
  
  // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
  const blob = new Blob(['\ufeff' + csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', `complaints_${new Date().toISOString().split('T')[0]}.csv`);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(() => {
    if (currentTab === 'status') {
        refreshServerStatus();
        refreshStats();
    } else if (currentTab === 'complaints') {
        refreshComplaints();
    }
}, 60000); 