#!/usr/bin/env node

require('dotenv').config();
const fs = require('fs');
const path = require('path');
const mongoose = require('mongoose');

console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ï–†–í–ï–†–ê');
console.log('=====================\n');

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø:');
console.log('NODE_ENV:', process.env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
console.log('PORT:', process.env.PORT || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
console.log('MONGODB_URI:', process.env.MONGODB_URI ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê');
console.log('JWT_SECRET:', process.env.JWT_SECRET ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
console.log('BASE_URL:', process.env.BASE_URL || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
console.log('STATIC_URL:', process.env.STATIC_URL || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
console.log('');

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
console.log('2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:');
const configFiles = [
  'app.js',
  'server.js',
  'package.json',
  'config/app.config.js',
  'config/db.config.js',
  'config/logger.config.js'
];

configFiles.forEach(file => {
  const exists = fs.existsSync(file);
  console.log(`${file}: ${exists ? '‚úÖ –Ω–∞–π–¥–µ–Ω' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}`);
});
console.log('');

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
console.log('3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê SSL –°–ï–†–¢–ò–§–ò–ö–ê–¢–û–í:');
const sslDir = path.join(__dirname, 'ssl');
const sslFiles = ['privkey.pem', 'cert.pem', 'chain.pem'];

if (fs.existsSync(sslDir)) {
  console.log('–ü–∞–ø–∫–∞ ssl: ‚úÖ –Ω–∞–π–¥–µ–Ω–∞');
  sslFiles.forEach(file => {
    const filePath = path.join(sslDir, file);
    const exists = fs.existsSync(filePath);
    console.log(`  ${file}: ${exists ? '‚úÖ –Ω–∞–π–¥–µ–Ω' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}`);
  });
} else {
  console.log('–ü–∞–ø–∫–∞ ssl: ‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê');
}
console.log('');

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
console.log('4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö MONGODB:');
async function testMongoDB() {
  try {
    if (!process.env.MONGODB_URI) {
      console.log('‚ùå MONGODB_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
      return;
    }

    console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB...');
    const conn = await mongoose.connect(process.env.MONGODB_URI, {
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
    });
    
    console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log(`   –•–æ—Å—Ç: ${conn.connection.host}`);
    console.log(`   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${conn.connection.name}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º
    const collections = await conn.connection.db.listCollections().toArray();
    console.log(`   –ö–æ–ª–ª–µ–∫—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: ${collections.length}`);
    
    await mongoose.disconnect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:');
    console.log(`   ${error.message}`);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    if (error.message.includes('ECONNREFUSED')) {
      console.log('   üí° MongoDB —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
      console.log('      - –ó–∞–ø—É—â–µ–Ω –ª–∏ MongoDB –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä');
      console.log('      - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –ø–æ—Ä—Ç (27017)');
      console.log('      - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ç–∏');
    } else if (error.message.includes('Authentication failed')) {
      console.log('   üí° –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
      console.log('      - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è');
      console.log('      - –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  }
}

// 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
console.log('5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô:');
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  console.log('‚úÖ package.json –ø—Ä–æ—á–∏—Ç–∞–Ω');
  console.log(`   –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${Object.keys(packageJson.dependencies || {}).length}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º node_modules
  const nodeModulesExists = fs.existsSync('node_modules');
  console.log(`   node_modules: ${nodeModulesExists ? '‚úÖ –Ω–∞–π–¥–µ–Ω' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}`);
  
  if (!nodeModulesExists) {
    console.log('   üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: npm install');
  }
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json:', error.message);
}
console.log('');

// 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
console.log('6Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–û–†–¢–û–í:');
const net = require('net');

function checkPort(port) {
  return new Promise((resolve) => {
    const server = net.createServer();
    server.listen(port, () => {
      server.once('close', () => {
        resolve(true);
      });
      server.close();
    });
    server.on('error', () => {
      resolve(false);
    });
  });
}

async function checkPorts() {
  const ports = [3000, 80, 443];
  for (const port of ports) {
    const isAvailable = await checkPort(port);
    console.log(`   –ü–æ—Ä—Ç ${port}: ${isAvailable ? '‚úÖ —Å–≤–æ–±–æ–¥–µ–Ω' : '‚ùå –∑–∞–Ω—è—Ç'}`);
  }
}
console.log('');

// 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
console.log('7Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í–û–ô –°–ò–°–¢–ï–ú–´:');
const requiredDirs = ['uploads', 'logs', 'config'];
requiredDirs.forEach(dir => {
  const exists = fs.existsSync(dir);
  console.log(`${dir}/: ${exists ? '‚úÖ –Ω–∞–π–¥–µ–Ω' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}`);
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
try {
  fs.accessSync('.', fs.constants.W_OK);
  console.log('–ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å: ‚úÖ –µ—Å—Ç—å');
} catch (error) {
  console.log('–ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å: ‚ùå –ù–ï–¢');
}
console.log('');

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
async function runDiagnostics() {
  await testMongoDB();
  await checkPorts();
  
  console.log('8Ô∏è‚É£ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  console.log('================');
  
  if (!process.env.MONGODB_URI) {
    console.log('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MONGODB_URI –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }
  
  if (!process.env.JWT_SECRET) {
    console.log('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ JWT_SECRET –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }
  
  if (!fs.existsSync('node_modules')) {
    console.log('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: npm install');
  }
  
  if (!fs.existsSync('ssl')) {
    console.log('‚ö†Ô∏è  –ü–∞–ø–∫–∞ ssl –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í production —Ä–µ–∂–∏–º–µ —Å–µ—Ä–≤–µ—Ä –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTP');
  }
  
  console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

runDiagnostics().catch(console.error); 