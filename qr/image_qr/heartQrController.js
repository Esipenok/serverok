const {
  generateHeartQRCode,
  generateMultiHeartQRCode,
  generateGradientHeartQRCode
} = require('./heartQrGenerator');
const QrCode = require('../models/QrCode');

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ —Å —Å–µ—Ä–¥–µ—á–∫–æ–º –≤ —Ü–µ–Ω—Ç—Ä–µ
 */
exports.generateHeartQrImage = async (req, res) => {
  try {
    const { qrId } = req.params;
    const { 
      style = 'center', // 'center', 'corners', 'gradient'
      size = 300,
      heartColor = '#FF4757',
      foregroundColor = '#FF6B6B',
      backgroundColor = '#FFFFFF'
    } = req.query;

    if (!qrId) {
      return res.status(400).json({ 
        success: false, 
        message: 'QR ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º QR-–∫–æ–¥
    const qrCode = await QrCode.findOne({ qr_id: qrId });
    
    if (!qrCode) {
      return res.status(404).json({ 
        success: false, 
        message: 'QR –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è QR-–∫–æ–¥–∞
    const baseUrl = `${req.protocol}://${req.get('host')}`;
    const qrUrl = `yourapp://qr/${qrCode.is_permanent ? 'permanent' : 'transferable'}/${qrCode.qr_id}`;

    let qrImageBuffer;

    // –í—ã–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    switch (style) {
      case 'center':
        qrImageBuffer = await generateHeartQRCode(qrUrl, {
          size: parseInt(size),
          foregroundColor,
          backgroundColor,
          heartColor
        });
        break;
      
      case 'corners':
        qrImageBuffer = await generateMultiHeartQRCode(qrUrl, {
          size: parseInt(size),
          foregroundColor,
          backgroundColor,
          heartColor
        });
        break;
      
      case 'gradient':
        qrImageBuffer = await generateGradientHeartQRCode(qrUrl, {
          size: parseInt(size),
          foregroundColor,
          backgroundColor,
          gradientColors: [heartColor, '#FF8E8E', '#FF4757']
        });
        break;
      
      default:
        qrImageBuffer = await generateHeartQRCode(qrUrl, {
          size: parseInt(size),
          foregroundColor,
          backgroundColor,
          heartColor
        });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    res.writeHead(200, {
      'Content-Type': 'image/png',
      'Content-Length': qrImageBuffer.length,
      'Cache-Control': 'public, max-age=3600' // –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 1 —á–∞—Å
    });
    res.end(qrImageBuffer);

  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ —Å —Å–µ—Ä–¥–µ—á–∫–æ–º: ${error.message}`, error.stack);
    return res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 
      error: error.message 
    });
  }
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ —Å —Å–µ—Ä–¥–µ—á–∫–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
exports.generateUserHeartQr = async (req, res) => {
  try {
    const { userId } = req.params;
    const { 
      style = 'center',
      size = 300,
      heartColor = '#FF4757',
      foregroundColor = '#FF6B6B',
      backgroundColor = '#FFFFFF'
    } = req.query;

    if (!userId) {
      return res.status(400).json({ 
        success: false, 
        message: 'User ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π QR-–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const qrCode = await QrCode.findOne({ 
      user_id: userId, 
      is_permanent: true 
    });

    if (!qrCode) {
      return res.status(404).json({ 
        success: false, 
        message: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π QR –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è QR-–∫–æ–¥–∞
    const baseUrl = `${req.protocol}://${req.get('host')}`;
    const qrUrl = `yourapp://qr/permanent/${qrCode.qr_id}`;

    let qrImageBuffer;

    // –í—ã–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    switch (style) {
      case 'center':
        qrImageBuffer = await generateHeartQRCode(qrUrl, {
          size: parseInt(size),
          foregroundColor,
          backgroundColor,
          heartColor
        });
        break;
      
      case 'corners':
        qrImageBuffer = await generateMultiHeartQRCode(qrUrl, {
          size: parseInt(size),
          foregroundColor,
          backgroundColor,
          heartColor
        });
        break;
      
      case 'gradient':
        qrImageBuffer = await generateGradientHeartQRCode(qrUrl, {
          size: parseInt(size),
          foregroundColor,
          backgroundColor,
          gradientColors: [heartColor, '#FF8E8E', '#FF4757']
        });
        break;
      
      default:
        qrImageBuffer = await generateHeartQRCode(qrUrl, {
          size: parseInt(size),
          foregroundColor,
          backgroundColor,
          heartColor
        });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    res.writeHead(200, {
      'Content-Type': 'image/png',
      'Content-Length': qrImageBuffer.length,
      'Cache-Control': 'public, max-age=3600'
    });
    res.end(qrImageBuffer);

  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–¥–µ—á–∫–æ–º: ${error.message}`, error.stack);
    return res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 
      error: error.message 
    });
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏ QR-–∫–æ–¥–æ–≤ —Å —Å–µ—Ä–¥–µ—á–∫–∞–º–∏
 */
exports.getHeartQrStyles = async (req, res) => {
  try {
    const styles = [
      {
        id: 'center',
        name: '–°–µ—Ä–¥–µ—á–∫–æ –≤ —Ü–µ–Ω—Ç—Ä–µ',
        description: '–û–¥–Ω–æ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–µ—Ä–¥–µ—á–∫–æ –≤ —Ü–µ–Ω—Ç—Ä–µ QR-–∫–æ–¥–∞',
        preview: '‚ù§Ô∏è'
      },
      {
        id: 'corners',
        name: '–°–µ—Ä–¥–µ—á–∫–∏ –≤ —É–≥–ª–∞—Ö',
        description: '–ß–µ—Ç—ã—Ä–µ –º–∞–ª–µ–Ω—å–∫–∏—Ö —Å–µ—Ä–¥–µ—á–∫–∞ –≤ —É–≥–ª–∞—Ö QR-–∫–æ–¥–∞',
        preview: '‚ù§Ô∏è‚ù§Ô∏è\n‚ù§Ô∏è‚ù§Ô∏è'
      },
      {
        id: 'gradient',
        name: '–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–µ —Å–µ—Ä–¥–µ—á–∫–æ',
        description: '–°–µ—Ä–¥–µ—á–∫–æ —Å –∫—Ä–∞—Å–∏–≤—ã–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º –≤ —Ü–µ–Ω—Ç—Ä–µ',
        preview: 'üíñ'
      }
    ];

    return res.status(200).json({
      success: true,
      data: styles
    });

  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∏–ª–µ–π QR –∫–æ–¥–æ–≤: ${error.message}`, error.stack);
    return res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 
      error: error.message 
    });
  }
};

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR-–∫–æ–¥–∞ —Å —Å–µ—Ä–¥–µ—á–∫–æ–º
 */
exports.testHeartQrGeneration = async (req, res) => {
  try {
    const { 
      data = 'https://example.com',
      style = 'center',
      size = 300,
      heartColor = '#FF4757',
      foregroundColor = '#FF6B6B',
      backgroundColor = '#FFFFFF'
    } = req.body;

    let qrImageBuffer;

    // –í—ã–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    switch (style) {
      case 'center':
        qrImageBuffer = await generateHeartQRCode(data, {
          size: parseInt(size),
          foregroundColor,
          backgroundColor,
          heartColor
        });
        break;
      
      case 'corners':
        qrImageBuffer = await generateMultiHeartQRCode(data, {
          size: parseInt(size),
          foregroundColor,
          backgroundColor,
          heartColor
        });
        break;
      
      case 'gradient':
        qrImageBuffer = await generateGradientHeartQRCode(data, {
          size: parseInt(size),
          foregroundColor,
          backgroundColor,
          gradientColors: [heartColor, '#FF8E8E', '#FF4757']
        });
        break;
      
      default:
        qrImageBuffer = await generateHeartQRCode(data, {
          size: parseInt(size),
          foregroundColor,
          backgroundColor,
          heartColor
        });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    res.writeHead(200, {
      'Content-Type': 'image/png',
      'Content-Length': qrImageBuffer.length,
      'Cache-Control': 'public, max-age=3600'
    });
    res.end(qrImageBuffer);

  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞: ${error.message}`, error.stack);
    return res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 
      error: error.message 
    });
  }
}; 