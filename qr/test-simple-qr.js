const QRCode = require('qrcode');
const fs = require('fs');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testData = [
  {
    name: 'permanent-qr',
    url: 'yourapp://qr/permanent/test-uuid-123',
    description: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π QR –∫–æ–¥'
  },
  {
    name: 'transferable-qr', 
    url: 'yourapp://qr/transferable/test-uuid-456',
    description: '–ü–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π QR –∫–æ–¥'
  },
  {
    name: 'custom-url-qr',
    url: 'https://example.com/test',
    description: 'QR –∫–æ–¥ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º URL'
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞
async function generateQR(data, filename) {
  try {
    const options = {
      errorCorrectionLevel: 'Q', // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—à–∏–±–æ–∫
      type: 'image/png',
      quality: 0.92,
      margin: 1,
      color: {
        dark: '#665BFF',  // –°–∏–Ω–∏–π —Ü–≤–µ—Ç
        light: '#FFFFFF'  // –ë–µ–ª—ã–π —Ñ–æ–Ω
      },
      width: 500
    };

    console.log(`–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥: ${data.description}`);
    console.log(`URL: ${data.url}`);
    
    const buffer = await QRCode.toBuffer(data.url, options);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    fs.writeFileSync(filename, buffer);
    console.log(`‚úÖ QR –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
    console.log(`üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${buffer.length} –±–∞–π—Ç`);
    console.log('---');
    
    return buffer;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ "${data.name}":`, error.message);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runTests() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–æ–≤...\n');
  
  for (const data of testData) {
    const filename = `test-${data.name}.png`;
    await generateQR(data, filename);
  }
  
  console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüìÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:');
  testData.forEach(data => {
    console.log(`   - test-${data.name}.png`);
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests().catch(console.error); 