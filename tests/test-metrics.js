const fetch = require('node-fetch');

async function testMetrics() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–µ—Ç—Ä–∏–∫...\n');

  try {
    // –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    const appMetrics = await fetch('http://localhost:3000/metrics');
    if (appMetrics.ok) {
      const metrics = await appMetrics.text();
      console.log('‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
      const hasHttpMetrics = metrics.includes('http_requests_total');
      const hasBusinessMetrics = metrics.includes('matches_total') || metrics.includes('fast_matches_total');
      
      console.log(`   HTTP –º–µ—Ç—Ä–∏–∫–∏: ${hasHttpMetrics ? '‚úÖ' : '‚ùå'}`);
      console.log(`   –ë–∏–∑–Ω–µ—Å –º–µ—Ç—Ä–∏–∫–∏: ${hasBusinessMetrics ? '‚úÖ' : '‚ùå'}`);
    } else {
      console.log('‚ùå –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }

    // –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ Redis
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ Redis...');
    const redisMetrics = await fetch('http://localhost:9121/metrics');
    if (redisMetrics.ok) {
      const metrics = await redisMetrics.text();
      console.log('‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ Redis –¥–æ—Å—Ç—É–ø–Ω—ã');
      
      const hasMemoryMetrics = metrics.includes('redis_memory_used_bytes');
      const hasCommandMetrics = metrics.includes('redis_commands_processed_total');
      
      console.log(`   –ú–µ—Ç—Ä–∏–∫–∏ –ø–∞–º—è—Ç–∏: ${hasMemoryMetrics ? '‚úÖ' : '‚ùå'}`);
      console.log(`   –ú–µ—Ç—Ä–∏–∫–∏ –∫–æ–º–∞–Ω–¥: ${hasCommandMetrics ? '‚úÖ' : '‚ùå'}`);
    } else {
      console.log('‚ùå –ú–µ—Ç—Ä–∏–∫–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }

    // –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ Kafka
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ Kafka...');
    const kafkaMetrics = await fetch('http://localhost:9308/metrics');
    if (kafkaMetrics.ok) {
      const metrics = await kafkaMetrics.text();
      console.log('‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ Kafka –¥–æ—Å—Ç—É–ø–Ω—ã');
      
      const hasTopicMetrics = metrics.includes('kafka_topic_partition_current_offset');
      const hasConsumerMetrics = metrics.includes('kafka_consumer_group_lag');
      
      console.log(`   –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ–ø–∏–∫–æ–≤: ${hasTopicMetrics ? '‚úÖ' : '‚ùå'}`);
      console.log(`   –ú–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω—Å—å—é–º–µ—Ä–æ–≤: ${hasConsumerMetrics ? '‚úÖ' : '‚ùå'}`);
    } else {
      console.log('‚ùå –ú–µ—Ç—Ä–∏–∫–∏ Kafka –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }

    // –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫...');
    const systemMetrics = await fetch('http://localhost:9100/metrics');
    if (systemMetrics.ok) {
      const metrics = await systemMetrics.text();
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã');
      
      const hasCpuMetrics = metrics.includes('node_cpu_seconds_total');
      const hasMemoryMetrics = metrics.includes('node_memory_MemTotal_bytes');
      
      console.log(`   CPU –º–µ—Ç—Ä–∏–∫–∏: ${hasCpuMetrics ? '‚úÖ' : '‚ùå'}`);
      console.log(`   Memory –º–µ—Ç—Ä–∏–∫–∏: ${hasMemoryMetrics ? '‚úÖ' : '‚ùå'}`);
    } else {
      console.log('‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }

    // –¢–µ—Å—Ç Prometheus
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ Prometheus...');
    const prometheusStatus = await fetch('http://localhost:9090/api/v1/status/targets');
    if (prometheusStatus.ok) {
      const status = await prometheusStatus.json();
      console.log('‚úÖ Prometheus –¥–æ—Å—Ç—É–ø–µ–Ω');
      
      const targets = status.data.activeTargets || [];
      console.log(`   –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞—Ä–≥–µ—Ç—ã: ${targets.length}`);
      
      targets.forEach(target => {
        console.log(`     - ${target.labels.job}: ${target.health}`);
      });
    } else {
      console.log('‚ùå Prometheus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    // –¢–µ—Å—Ç Grafana
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ Grafana...');
    const grafanaStatus = await fetch('http://localhost:3001/api/health');
    if (grafanaStatus.ok) {
      console.log('‚úÖ Grafana –¥–æ—Å—Ç—É–ø–µ–Ω');
    } else {
      console.log('‚ùå Grafana –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    console.log('\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Grafana: http://localhost:3001 (admin/admin123)');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—à–±–æ—Ä–¥—ã –≤ —Ä–∞–∑–¥–µ–ª–µ Dashboards');
    console.log('3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–ª–µ—Ä—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ Alerting');
    console.log('4. –ò–∑—É—á–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ Prometheus: http://localhost:9090');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫:', error.message);
    console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã:');
    console.log('   docker-compose -f docker-compose.zero-downtime.yml up -d');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testMetrics(); 