const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api';
const TEST_USER_ID = '12345';
const TEST_TOKEN = 'test_token_here';

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∏–Ω–≤–∞–π—Ç–æ–≤
async function testInvitesAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∏–Ω–≤–∞–π—Ç–æ–≤...\n');

  try {
    // 1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω–≤–∞–π—Ç–æ–≤
    console.log('1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω–≤–∞–π—Ç–æ–≤:');
    try {
      const countResponse = await axios.get(`${BASE_URL}/invites/count/${TEST_USER_ID}`, {
        headers: {
          'Authorization': `Bearer ${TEST_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–∞–π—Ç–æ–≤:', countResponse.data);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω–≤–∞–π—Ç–æ–≤:', error.response?.data || error.message);
    }

    // 2. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–≤–∞–π—Ç–∞
    console.log('\n2. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–≤–∞–π—Ç–∞:');
    try {
      const processResponse = await axios.post(`${BASE_URL}/invites/process`, {
        inviterUserId: TEST_USER_ID
      }, {
        headers: {
          'Content-Type': 'application/json'
        }
      });
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–Ω–≤–∞–π—Ç:', processResponse.data);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω–≤–∞–π—Ç–∞:', error.response?.data || error.message);
    }

    // 3. –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    console.log('\n3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:');
    try {
      const statsResponse = await axios.get(`${BASE_URL}/invites/stats/${TEST_USER_ID}`, {
        headers: {
          'Authorization': `Bearer ${TEST_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', statsResponse.data);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.response?.data || error.message);
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –∏–Ω–≤–∞–π—Ç–æ–º
async function testRegistrationWithInvite() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –∏–Ω–≤–∞–π—Ç–æ–º...\n');

  try {
    const registerResponse = await axios.post(`${BASE_URL}/auth/register`, {
      email: `test_invite_${Date.now()}@example.com`,
      firebaseUid: `firebase_${Date.now()}`,
      inviterUserId: TEST_USER_ID
    }, {
      headers: {
        'Content-Type': 'application/json'
      }
    });

    console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –∏–Ω–≤–∞–π—Ç–æ–º:', {
      userId: registerResponse.data.data.userId,
      email: registerResponse.data.data.email
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–≤–µ–ª–∏—á–∏–ª—Å—è –ª–∏ —Å—á–µ—Ç—á–∏–∫
    const countResponse = await axios.get(`${BASE_URL}/invites/count/${TEST_USER_ID}`, {
      headers: {
        'Authorization': `Bearer ${TEST_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });

    console.log('‚úÖ –°—á–µ—Ç—á–∏–∫ –∏–Ω–≤–∞–π—Ç–æ–≤ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', countResponse.data);

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –∏–Ω–≤–∞–π—Ç–æ–º:', error.response?.data || error.message);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–≤–∞–π—Ç–æ–≤\n');
  
  await testInvitesAPI();
  await testRegistrationWithInvite();
  
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = {
  testInvitesAPI,
  testRegistrationWithInvite,
  runTests
}; 