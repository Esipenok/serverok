const { initializeKafka, kafkaModuleService } = require('../kafka/init');
const logger = require('../config/logger.config');

async function testKafkaModules() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Kafka —Å –º–æ–¥—É–ª—è–º–∏...\n');

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Kafka
    console.log('1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kafka...');
    await initializeKafka();
    console.log('‚úÖ Kafka –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n');

    // –¢–µ—Å—Ç 1: –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ú–û–î–£–õ–ò
    console.log('2. –¢–µ—Å—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –º–æ–¥—É–ª–µ–π...');
    
    // –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    const photoResult = await kafkaModuleService.sendPhotoOperation('upload', {
      userId: 'user123',
      photoId: 'photo456',
      fileName: 'profile.jpg',
      size: 1024000
    });
    console.log(photoResult ? '‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —Å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' : '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ\n');

    // –ú—ç—Ç—á–∏
    const matchResult = await kafkaModuleService.sendMatchOperation('create', {
      user1Id: 'user123',
      user2Id: 'user456',
      user1Name: '–ê–Ω–Ω–∞',
      user2Name: '–ú–∞—Ä–∏—è',
      user1Age: 25,
      user2Age: 28,
      user1PhotoUrl: 'https://example.com/photo1.jpg',
      user2PhotoUrl: 'https://example.com/photo2.jpg'
    });
    console.log(matchResult ? '‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —Å –º—ç—Ç—á–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' : '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º—ç—Ç—á–∞\n');

    // –¢–µ—Å—Ç 2: –í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ - –§–ò–õ–¨–¢–†–´
    console.log('3. –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)...');
    
    const filterResults = await Promise.all([
      kafkaModuleService.sendFilterOperation('filter_fast_match', 'fast_match_filter', {
        userId: 'user123',
        filters: { age: { min: 20, max: 30 }, distance: 50 },
        location: { lat: 55.7558, lng: 37.6176 }
      }),
      kafkaModuleService.sendFilterOperation('filter_finder', 'finder_filter', {
        userId: 'user456',
        searchParams: { interests: ['—Å–ø–æ—Ä—Ç', '–º—É–∑—ã–∫–∞'] },
        page: 1,
        limit: 20
      }),
      kafkaModuleService.sendFilterOperation('filter_market', 'market_filter', {
        userId: 'user789',
        category: 'premium',
        excludeList: ['user123', 'user456'],
        location: { lat: 55.7558, lng: 37.6176 }
      })
    ]);
    
    const filterSuccess = filterResults.every(result => result);
    console.log(filterSuccess ? '‚úÖ –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã' : '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n');

    // –¢–µ—Å—Ç 3: –°–†–ï–î–ù–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢
    console.log('4. –¢–µ—Å—Ç –º–æ–¥—É–ª–µ–π —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞...');
    
    const mediumResults = await Promise.all([
      kafkaModuleService.sendAuthOperation('register', {
        userId: 'newuser123',
        email: 'test@example.com',
        username: 'testuser'
      }),
      kafkaModuleService.sendFastMatchOperation('request', {
        userId: 'user123',
        targetUserId: 'user456',
        requestId: 'req789'
      }),
      kafkaModuleService.sendMarketOperation('create', {
        userId: 'user123',
        marketType: 'premium',
        description: '–ü—Ä–µ–º–∏—É–º –ø—Ä–æ—Ñ–∏–ª—å'
      }),
      kafkaModuleService.sendQROperation('generate', {
        userId: 'user123',
        qrType: 'profile',
        data: 'https://willowe.love/user123'
      })
    ]);
    
    const mediumSuccess = mediumResults.every(result => result);
    console.log(mediumSuccess ? '‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã' : '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏\n');

    // –¢–µ—Å—Ç 4: –ù–ò–ó–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢
    console.log('5. –¢–µ—Å—Ç –º–æ–¥—É–ª–µ–π –Ω–∏–∑–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞...');
    
    const lowResults = await Promise.all([
      kafkaModuleService.sendComplainOperation('submit', {
        userId: 'user123',
        targetUserId: 'user456',
        reason: 'spam',
        description: '–°–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è'
      }),
      kafkaModuleService.sendCountryOperation('detect', {
        userId: 'user123',
        ip: '192.168.1.1',
        userAgent: 'Mozilla/5.0...'
      }),
      kafkaModuleService.sendInviteOperation('send', {
        userId: 'user123',
        inviteCode: 'INVITE123',
        email: 'friend@example.com'
      })
    ]);
    
    const lowSuccess = lowResults.every(result => result);
    console.log(lowSuccess ? '‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –Ω–∏–∑–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã' : '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏\n');

    // –¢–µ—Å—Ç 5: –ê–ù–ê–õ–ò–¢–ò–ö–ê
    console.log('6. –¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
    
    const analyticsResults = await Promise.all([
      kafkaModuleService.sendAnalyticsEvent('user_action', {
        userId: 'user123',
        action: 'profile_view',
        timestamp: Date.now(),
        metadata: { viewedUserId: 'user456' }
      }),
      kafkaModuleService.sendSystemMetric('performance', {
        endpoint: '/api/matches',
        responseTime: 150,
        statusCode: 200,
        timestamp: Date.now()
      })
    ]);
    
    const analyticsSuccess = analyticsResults.every(result => result);
    console.log(analyticsSuccess ? '‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' : '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏\n');

    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    console.log('7. –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...');
    await new Promise(resolve => setTimeout(resolve, 10000));

    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Kafka
    console.log('8. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Kafka...');
    await kafkaModuleService.disconnect();
    console.log('‚úÖ Kafka –æ—Ç–∫–ª—é—á–µ–Ω\n');

    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log('- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –º–æ–¥—É–ª–∏: ' + (photoResult && matchResult ? '‚úÖ' : '‚ùå'));
    console.log('- –§–∏–ª—å—Ç—Ä—ã (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç): ' + (filterSuccess ? '‚úÖ' : '‚ùå'));
    console.log('- –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ' + (mediumSuccess ? '‚úÖ' : '‚ùå'));
    console.log('- –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ' + (lowSuccess ? '‚úÖ' : '‚ùå'));
    console.log('- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: ' + (analyticsSuccess ? '‚úÖ' : '‚ùå'));

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    await kafkaModuleService.disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testKafkaModules(); 