version: '3.8'

services:
  # MongoDB сервис (без изменений)
  mongodb:
    image: mongo:7.0
    container_name: dating_app_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-dating_app}
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - app-network

  # Redis сервис
  redis:
    image: redis:7
    container_name: dating_app_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - app-network

  # Zookeeper для Kafka (Bitnami) - оптимизированная конфигурация
  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: dating_app_zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_HEAP_SIZE=512
      - ZOO_MAX_CLIENT_CNXNS=60
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka брокер (Bitnami) - оптимизированная конфигурация для всех модулей
  kafka:
    image: bitnami/kafka:3.6
    container_name: dating_app_kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
      # Оптимизация для высоких нагрузок
      - KAFKA_CFG_NUM_NETWORK_THREADS=8
      - KAFKA_CFG_NUM_IO_THREADS=8
      - KAFKA_CFG_SOCKET_SEND_BUFFER_BYTES=102400
      - KAFKA_CFG_SOCKET_RECEIVE_BUFFER_BYTES=102400
      - KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES=104857600
      - KAFKA_CFG_NUM_PARTITIONS=10
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_CFG_LOG_RETENTION_HOURS=168
      - KAFKA_CFG_LOG_SEGMENT_BYTES=1073741824
      - KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS=300000
      # Настройки для разных типов топиков
      - KAFKA_CFG_DELETE_TOPIC_ENABLE=true
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - kafka_data:/bitnami/kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Kafka UI для мониторинга (современная замена Kafka Manager)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: dating_app_kafka_ui
    restart: unless-stopped
    ports:
      - "9000:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: dating-app-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - zookeeper
      - kafka
    networks:
      - app-network

  # Grafana Alloy для отправки метрик в Grafana Cloud
  alloy:
    image: grafana/alloy:latest
    container_name: dating_app_alloy
    restart: unless-stopped
    ports:
      - "12345:12345"
    volumes:
      - ./alloy-config.hcl:/etc/alloy/config.alloy
      - /app/logs:/app/logs:ro
    command: run /etc/alloy/config.alloy --server.http.listen-addr=0.0.0.0:12345
    depends_on:
      - app
      - redis-exporter
      - kafka-exporter
      - node-exporter
    networks:
      - app-network

  # Redis Exporter для сбора метрик Redis
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: dating_app_redis_exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      - redis
    networks:
      - app-network

  # Kafka Exporter для сбора метрик Kafka
  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: dating_app_kafka_exporter
    restart: unless-stopped
    ports:
      - "9308:9308"
    command:
      - '--kafka.server=kafka:9092'
      - '--web.listen-address=:9308'
    depends_on:
      - kafka
    networks:
      - app-network

  # Node Exporter для системных метрик
  node-exporter:
    image: prom/node-exporter:latest
    container_name: dating_app_node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - app-network

  # Node.js сервер (оптимизированный для zero-downtime с Kafka)
  app:
    image: node:18
    container_name: dating_app_server
    restart: unless-stopped
    working_dir: /app
    command: bash -c "npm install --production && node scripts/setup-kafka-topics.js && node src/server.js"
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/${MONGO_DATABASE:-dating_app}?authSource=admin
      JWT_SECRET: ${JWT_SECRET:-your_secret_key}
      JWT_EXPIRE: ${JWT_EXPIRE:-7d}
      BASE_URL: https://willowe.love
      STATIC_URL: https://willowe.love
      REDIS_URL: redis://redis:6379
      # Kafka конфигурация
      KAFKA_BROKER: kafka:9092
      KAFKA_CLIENT_ID: dating_app_producer
      KAFKA_GROUP_ID: dating_app_consumer
      # Настройки для разных модулей
      KAFKA_TOPIC_MATCHES: matches
      KAFKA_TOPIC_PHOTOS: photos
      KAFKA_TOPIC_FILTERS: filters
      KAFKA_TOPIC_AUTH: auth
      KAFKA_TOPIC_FAST_MATCH: fast_match
      KAFKA_TOPIC_MARKET_PROFILES: marketprofiles
      KAFKA_TOPIC_ONE_NIGHT: one_night
      KAFKA_TOPIC_QR: qr
      KAFKA_TOPIC_COMPLAIN: complain
      KAFKA_TOPIC_COUNTRY: country
      KAFKA_TOPIC_INVITES: invites
    ports:
      - "3000:3000"
    volumes:
      # Монтируем код напрямую из /root/app
      - /root/app:/app
      # Монтируем общие данные
      - /root/app/uploads:/app/uploads
      - /root/app/logs:/app/logs
    depends_on:
      mongodb:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s



volumes:
  mongodb_data:
    driver: local
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local

networks:
  app-network:
    driver: bridge 