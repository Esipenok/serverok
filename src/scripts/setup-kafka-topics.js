const { Kafka } = require('kafkajs');
const logger = require('../src/core/config/logger.config');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Kafka
const kafka = new Kafka({
  clientId: process.env.KAFKA_CLIENT_ID || 'dating_app_setup',
  brokers: [process.env.KAFKA_BROKER || 'localhost:9092']
});

const admin = kafka.admin();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–ø–∏–∫–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
const topicsConfig = {
  // –ö–†–ò–¢–ò–ß–ù–û (‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê) - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  'photos': {
    numPartitions: 8,
    replicationFactor: 1,
    configEntries: [
      { name: 'retention.ms', value: '3600000' }, // 1 —á–∞—Å
      { name: 'cleanup.policy', value: 'delete' },
      { name: 'compression.type', value: 'lz4' }
    ]
  },
  'matches': {
    numPartitions: 6,
    replicationFactor: 1,
    configEntries: [
      { name: 'retention.ms', value: '86400000' }, // 24 —á–∞—Å–∞
      { name: 'cleanup.policy', value: 'delete' },
      { name: 'compression.type', value: 'lz4' }
    ]
  },

  // –í–´–°–û–ö–ò–ô (‚≠ê‚≠ê‚≠ê‚≠ê) - –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
  'filters': {
    numPartitions: 10,
    replicationFactor: 1,
    configEntries: [
      { name: 'retention.ms', value: '1800000' }, // 30 –º–∏–Ω—É—Ç
      { name: 'cleanup.policy', value: 'delete' },
      { name: 'compression.type', value: 'lz4' }
    ]
  },

  // –°–†–ï–î–ù–ò–ô (‚≠ê‚≠ê‚≠ê) - –±–∞–ª–∞–Ω—Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  'auth': {
    numPartitions: 4,
    replicationFactor: 1,
    configEntries: [
      { name: 'retention.ms', value: '604800000' }, // 7 –¥–Ω–µ–π
      { name: 'cleanup.policy', value: 'delete' },
      { name: 'compression.type', value: 'lz4' }
    ]
  },
  'fast_match': {
    numPartitions: 4,
    replicationFactor: 1,
    configEntries: [
      { name: 'retention.ms', value: '3600000' }, // 1 —á–∞—Å
      { name: 'cleanup.policy', value: 'delete' },
      { name: 'compression.type', value: 'lz4' }
    ]
  },
  'marketprofiles': {
    numPartitions: 4,
    replicationFactor: 1,
    configEntries: [
      { name: 'retention.ms', value: '604800000' }, // 7 –¥–Ω–µ–π
      { name: 'cleanup.policy', value: 'delete' },
      { name: 'compression.type', value: 'lz4' }
    ]
  },
  'one_night': {
    numPartitions: 4,
    replicationFactor: 1,
    configEntries: [
      { name: 'retention.ms', value: '3600000' }, // 1 —á–∞—Å
      { name: 'cleanup.policy', value: 'delete' },
      { name: 'compression.type', value: 'lz4' }
    ]
  },
  'qr': {
    numPartitions: 3,
    replicationFactor: 1,
    configEntries: [
      { name: 'retention.ms', value: '2592000000' }, // 30 –¥–Ω–µ–π
      { name: 'cleanup.policy', value: 'delete' },
      { name: 'compression.type', value: 'lz4' }
    ]
  },

  // –ù–ò–ó–ö–ò–ô (‚≠ê‚≠ê) - –±–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
  'complain': {
    numPartitions: 2,
    replicationFactor: 1,
    configEntries: [
      { name: 'retention.ms', value: '2592000000' }, // 30 –¥–Ω–µ–π
      { name: 'cleanup.policy', value: 'delete' },
      { name: 'compression.type', value: 'lz4' }
    ]
  },
  'country': {
    numPartitions: 2,
    replicationFactor: 1,
    configEntries: [
      { name: 'retention.ms', value: '2592000000' }, // 30 –¥–Ω–µ–π
      { name: 'cleanup.policy', value: 'delete' },
      { name: 'compression.type', value: 'lz4' }
    ]
  },
  'invites': {
    numPartitions: 2,
    replicationFactor: 1,
    configEntries: [
      { name: 'retention.ms', value: '2592000000' }, // 30 –¥–Ω–µ–π
      { name: 'cleanup.policy', value: 'delete' },
      { name: 'compression.type', value: 'lz4' }
    ]
  }
};

async function setupKafkaTopics() {
  try {
    logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Kafka —Ç–æ–ø–∏–∫–æ–≤...');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Kafka
    await admin.connect();
    logger.info('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–ø–∏–∫–æ–≤
    const existingTopics = await admin.listTopics();
    logger.info(`üìã –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–ø–∏–∫–æ–≤: ${existingTopics.length}`);

    // –°–æ–∑–¥–∞–µ–º —Ç–æ–ø–∏–∫–∏
    const topicsToCreate = [];
    
    for (const [topicName, config] of Object.entries(topicsConfig)) {
      if (!existingTopics.includes(topicName)) {
        topicsToCreate.push({
          topic: topicName,
          ...config
        });
        logger.info(`üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —Ç–æ–ø–∏–∫: ${topicName} (${config.numPartitions} –ø–∞—Ä—Ç–∏—Ü–∏–π)`);
      } else {
        logger.info(`‚úÖ –¢–æ–ø–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${topicName}`);
      }
    }

    if (topicsToCreate.length > 0) {
      logger.info(`üîß –°–æ–∑–¥–∞–µ–º ${topicsToCreate.length} –Ω–æ–≤—ã—Ö —Ç–æ–ø–∏–∫–æ–≤...`);
      
      await admin.createTopics({
        topics: topicsToCreate,
        waitForLeaders: true
      });
      
      logger.info('‚úÖ –í—Å–µ —Ç–æ–ø–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    } else {
      logger.info('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ–ø–∏–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
    }

    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const finalTopics = await admin.listTopics();
    logger.info(`üìä –ò—Ç–æ–≥–æ —Ç–æ–ø–∏–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${finalTopics.length}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø–∏–∫–∞—Ö
    const topicMetadata = await admin.fetchTopicMetadata({
      topics: Object.keys(topicsConfig)
    });
    
    logger.info('üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–ø–∏–∫–∞—Ö:');
    topicMetadata.topics.forEach(topic => {
      logger.info(`  - ${topic.name}: ${topic.partitions.length} –ø–∞—Ä—Ç–∏—Ü–∏–π`);
    });

  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Kafka —Ç–æ–ø–∏–∫–æ–≤:', error);
    throw error;
  } finally {
    await admin.disconnect();
    logger.info('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Kafka');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–ø–∏–∫–æ–≤
async function checkTopicsStatus() {
  try {
    await admin.connect();
    
    const topics = await admin.listTopics();
    const metadata = await admin.fetchTopicMetadata({ topics });
    
    logger.info('üìä –°—Ç–∞—Ç—É—Å —Ç–æ–ø–∏–∫–æ–≤ Kafka:');
    metadata.topics.forEach(topic => {
      const config = topicsConfig[topic.name];
      const priority = config ? 
        (config.numPartitions >= 8 ? '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –ö–†–ò–¢–ò–ß–ù–û' :
         config.numPartitions >= 6 ? '‚≠ê‚≠ê‚≠ê‚≠ê –í–´–°–û–ö–ò–ô' :
         config.numPartitions >= 4 ? '‚≠ê‚≠ê‚≠ê –°–†–ï–î–ù–ò–ô' : '‚≠ê‚≠ê –ù–ò–ó–ö–ò–ô') : '‚ùì –ù–ï–ò–ó–í–ï–°–¢–ù–û';
      
      logger.info(`  ${topic.name}: ${topic.partitions.length} –ø–∞—Ä—Ç–∏—Ü–∏–π (${priority})`);
    });
    
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–ø–∏–∫–æ–≤:', error);
  } finally {
    await admin.disconnect();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
module.exports = {
  setupKafkaTopics,
  checkTopicsStatus
};

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const command = process.argv[2];
  
  if (command === 'check') {
    checkTopicsStatus();
  } else {
    setupKafkaTopics()
      .then(() => {
        logger.info('üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Kafka –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        process.exit(0);
      })
      .catch((error) => {
        logger.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Kafka:', error);
        process.exit(1);
      });
  }
} 