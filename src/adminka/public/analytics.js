// –ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
class AnalyticsUI {
    constructor() {
        this.currentView = 'overview';
        this.refreshInterval = null;
        this.init();
    }

    init() {
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–µ–∫—Ü–∏—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        if (!this.createAnalyticsSection()) {
            console.log('–û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ - DOM –Ω–µ –≥–æ—Ç–æ–≤');
            // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 100–º—Å
            setTimeout(() => {
                this.init();
            }, 100);
            return;
        }
        
        this.loadAnalyticsData();
        this.startAutoRefresh();
        console.log('Analytics UI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    createAnalyticsSection() {
        const mainContent = document.getElementById('main-content');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!mainContent) {
            console.error('–≠–ª–µ–º–µ–Ω—Ç main-content –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–∫—Ü–∏—è –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
        if (document.getElementById('analytics-section')) {
            console.log('–°–µ–∫—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return true;
        }
        
        const analyticsSection = document.createElement('div');
        analyticsSection.id = 'analytics-section';
        analyticsSection.className = 'section';
        analyticsSection.style.display = 'none';
        
        analyticsSection.innerHTML = `
            <div class="section-header">
                <h2>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h2>
                <div class="header-controls">
                    <button class="btn btn-secondary" onclick="analyticsUI.refreshData()">
                        <i class="fas fa-sync-alt"></i> –û–±–Ω–æ–≤–∏—Ç—å
                    </button>
                    <button class="btn btn-success" onclick="analyticsUI.exportData()">
                        <i class="fas fa-download"></i> –≠–∫—Å–ø–æ—Ä—Ç
                    </button>
                    <button class="btn btn-warning" onclick="analyticsUI.showCleanupDialog()">
                        <i class="fas fa-broom"></i> –û—á–∏—Å—Ç–∫–∞
                    </button>
                </div>
            </div>

            <div class="analytics-nav">
                <button class="nav-btn active" data-view="overview">–û–±–∑–æ—Ä</button>
                <button class="nav-btn" data-view="events">–°–æ–±—ã—Ç–∏—è</button>
                <button class="nav-btn" data-view="users">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</button>
                <button class="nav-btn" data-view="sessions">–°–µ—Å—Å–∏–∏</button>
            </div>

            <div id="analytics-content">
                <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
            </div>
        `;
        
        mainContent.appendChild(analyticsSection);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.switchView(e.target.dataset.view);
            });
        });
        
        console.log('–°–µ–∫—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        return true;
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º–∏
    switchView(view) {
        this.currentView = view;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`[data-view="${view}"]`).classList.add('active');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        this.loadViewContent(view);
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    loadViewContent(view) {
        const content = document.getElementById('analytics-content');
        
        switch(view) {
            case 'overview':
                this.loadOverviewContent(content);
                break;
            case 'events':
                this.loadEventsContent(content);
                break;
            case 'users':
                this.loadUsersContent(content);
                break;
            case 'sessions':
                this.loadSessionsContent(content);
                break;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–∑–æ—Ä–∞
    loadOverviewContent(container) {
        container.innerHTML = `
            <div class="metrics-grid">
                <div class="metric-card">
                    <div class="metric-icon">üë•</div>
                    <div class="metric-content">
                        <div class="metric-value" id="dau-value">-</div>
                        <div class="metric-label">DAU</div>
                    </div>
                </div>
                <div class="metric-card">
                    <div class="metric-icon">üìà</div>
                    <div class="metric-content">
                        <div class="metric-value" id="mau-value">-</div>
                        <div class="metric-label">MAU</div>
                    </div>
                </div>
                <div class="metric-card">
                    <div class="metric-icon">üîÑ</div>
                    <div class="metric-content">
                        <div class="metric-value" id="retention-value">-</div>
                        <div class="metric-label">Retention %</div>
                    </div>
                </div>
                <div class="metric-card">
                    <div class="metric-icon">üìä</div>
                    <div class="metric-content">
                        <div class="metric-value" id="total-events-value">-</div>
                        <div class="metric-label">–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π</div>
                    </div>
                </div>
                <div class="metric-card">
                    <div class="metric-icon">üë§</div>
                    <div class="metric-content">
                        <div class="metric-value" id="unique-users-value">-</div>
                        <div class="metric-label">–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                    </div>
                </div>
                <div class="metric-card">
                    <div class="metric-icon">üïê</div>
                    <div class="metric-content">
                        <div class="metric-value" id="avg-session-value">-</div>
                        <div class="metric-label">–°—Ä–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è (—Å–µ–∫)</div>
                    </div>
                </div>
            </div>

            <div class="charts-grid">
                <div class="chart-container">
                    <h3>–°–æ–±—ã—Ç–∏—è –ø–æ —á–∞—Å–∞–º</h3>
                    <canvas id="events-by-hour-chart"></canvas>
                </div>
                <div class="chart-container">
                    <h3>–¢–æ–ø —Å–æ–±—ã—Ç–∏–π</h3>
                    <div id="top-events-list"></div>
                </div>
                <div class="chart-container">
                    <h3>–¢–æ–ø —Å—Ç—Ä–∞–Ω–∏—Ü</h3>
                    <div id="top-pages-list"></div>
                </div>
                <div class="chart-container">
                    <h3>–°–æ–±—ã—Ç–∏—è –ø–æ –¥–Ω—è–º</h3>
                    <canvas id="events-by-day-chart"></canvas>
                </div>
            </div>
        `;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
    loadEventsContent(container) {
        container.innerHTML = `
            <div class="events-controls">
                <div class="filters">
                    <input type="text" id="event-filter" placeholder="–§–∏–ª—å—Ç—Ä –ø–æ —Å–æ–±—ã—Ç–∏—é..." class="form-control">
                    <input type="text" id="user-filter" placeholder="–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é..." class="form-control">
                    <input type="date" id="date-from" class="form-control">
                    <input type="date" id="date-to" class="form-control">
                    <button class="btn btn-primary" onclick="analyticsUI.applyFilters()">–ü—Ä–∏–º–µ–Ω–∏—Ç—å</button>
                </div>
            </div>
            <div id="events-list" class="events-list">
                <!-- –°–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
            </div>
            <div class="pagination">
                <button class="btn btn-secondary" onclick="analyticsUI.loadMoreEvents()">–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ</button>
            </div>
        `;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    loadUsersContent(container) {
        container.innerHTML = `
            <div class="users-stats">
                <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
                <div id="users-stats-content">
                    <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                </div>
            </div>
        `;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π
    loadSessionsContent(container) {
        container.innerHTML = `
            <div class="sessions-stats">
                <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π</h3>
                <div id="sessions-stats-content">
                    <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                </div>
            </div>
        `;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    async loadAnalyticsData() {
        try {
            const response = await fetch('/api/analytics/stats');
            const data = await response.json();
            
            if (data.success) {
                this.updateMetrics(data.stats);
                this.updateCharts(data.stats);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    updateMetrics(stats) {
        const elements = {
            'dau-value': stats.dau || 0,
            'mau-value': stats.mau || 0,
            'retention-value': stats.retention?.retention_rate || 0,
            'total-events-value': stats.total_events || 0,
            'unique-users-value': stats.unique_users || 0,
            'avg-session-value': stats.session_metrics?.average_duration || 0
        };

        Object.entries(elements).forEach(([id, value]) => {
            const element = document.getElementById(id);
            if (element) {
                element.textContent = typeof value === 'number' ? value.toLocaleString() : value;
            }
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    updateCharts(stats) {
        this.updateEventsByHourChart(stats.events_by_hour);
        this.updateTopEventsList(stats.top_events);
        this.updateTopPagesList(stats.top_pages);
        this.updateEventsByDayChart(stats.events_by_day);
    }

    // –ì—Ä–∞—Ñ–∏–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ —á–∞—Å–∞–º
    updateEventsByHourChart(data) {
        const canvas = document.getElementById('events-by-hour-chart');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        const hours = Array.from({length: 24}, (_, i) => i);
        const values = hours.map(hour => data[hour] || 0);

        new Chart(ctx, {
            type: 'line',
            data: {
                labels: hours.map(h => `${h}:00`),
                datasets: [{
                    label: '–°–æ–±—ã—Ç–∏—è',
                    data: values,
                    borderColor: 'rgb(75, 192, 192)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }

    // –ì—Ä–∞—Ñ–∏–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ –¥–Ω—è–º
    updateEventsByDayChart(data) {
        const canvas = document.getElementById('events-by-day-chart');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        const dates = Object.keys(data).sort();
        const values = dates.map(date => data[date]);

        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: dates.map(d => new Date(d).toLocaleDateString()),
                datasets: [{
                    label: '–°–æ–±—ã—Ç–∏—è',
                    data: values,
                    backgroundColor: 'rgba(54, 162, 235, 0.8)'
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }

    // –°–ø–∏—Å–æ–∫ —Ç–æ–ø —Å–æ–±—ã—Ç–∏–π
    updateTopEventsList(events) {
        const container = document.getElementById('top-events-list');
        if (!container) return;

        container.innerHTML = events.map((event, index) => `
            <div class="top-item">
                <span class="rank">${index + 1}</span>
                <span class="name">${event.event}</span>
                <span class="count">${event.count}</span>
            </div>
        `).join('');
    }

    // –°–ø–∏—Å–æ–∫ —Ç–æ–ø —Å—Ç—Ä–∞–Ω–∏—Ü
    updateTopPagesList(pages) {
        const container = document.getElementById('top-pages-list');
        if (!container) return;

        container.innerHTML = pages.map((page, index) => `
            <div class="top-item">
                <span class="rank">${index + 1}</span>
                <span class="name">${page.page}</span>
                <span class="count">${page.count}</span>
            </div>
        `).join('');
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    async loadEvents(filters = {}) {
        try {
            const params = new URLSearchParams(filters);
            const response = await fetch(`/api/analytics/events?${params}`);
            const data = await response.json();
            
            if (data.success) {
                this.displayEvents(data.events);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π');
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
    displayEvents(events) {
        const container = document.getElementById('events-list');
        if (!container) return;

        container.innerHTML = events.map(event => `
            <div class="event-item">
                <div class="event-header">
                    <span class="event-name">${event.event_name}</span>
                    <span class="event-time">${new Date(event.timestamp).toLocaleString()}</span>
                </div>
                <div class="event-details">
                    <div class="event-user">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${event.user_id}</div>
                    <div class="event-session">–°–µ—Å—Å–∏—è: ${event.session_id}</div>
                    <div class="event-page">–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${event.page_url}</div>
                </div>
                <div class="event-properties">
                    <pre>${JSON.stringify(event.properties, null, 2)}</pre>
                </div>
            </div>
        `).join('');
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    applyFilters() {
        const filters = {
            event_name: document.getElementById('event-filter')?.value,
            user_id: document.getElementById('user-filter')?.value,
            date_from: document.getElementById('date-from')?.value,
            date_to: document.getElementById('date-to')?.value
        };

        // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        Object.keys(filters).forEach(key => {
            if (!filters[key]) delete filters[key];
        });

        this.loadEvents(filters);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    refreshData() {
        this.loadAnalyticsData();
        if (this.currentView === 'events') {
            this.loadEvents();
        }
    }

    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    startAutoRefresh() {
        this.refreshInterval = setInterval(() => {
            this.refreshData();
        }, 30000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    async exportData() {
        try {
            const format = confirm('–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ CSV?') ? 'csv' : 'json';
            window.open(`/api/analytics/export?format=${format}`, '_blank');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
            this.showError('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞');
        }
    }

    // –î–∏–∞–ª–æ–≥ –æ—á–∏—Å—Ç–∫–∏
    showCleanupDialog() {
        const days = prompt('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30):', '30');
        if (days && !isNaN(days)) {
            this.cleanupData(parseInt(days));
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    async cleanupData(days) {
        try {
            const response = await fetch('/api/analytics/cleanup', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ days })
            });
            
            const data = await response.json();
            if (data.success) {
                this.showSuccess(data.message);
                this.refreshData();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
    showError(message) {
        // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        console.error(message);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—Ö
    showSuccess(message) {
        // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        console.log(message);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    show() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ–∫—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            let analyticsSection = document.getElementById('analytics-section');
            if (!analyticsSection) {
                console.log('–°–µ–∫—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º...');
                if (!this.createAnalyticsSection()) {
                    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ–∫—Ü–∏—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
                    alert('–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
                    return;
                }
                analyticsSection = document.getElementById('analytics-section');
            }
            
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
            document.querySelectorAll('.tab-content').forEach(tc => tc.style.display = 'none');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            analyticsSection.style.display = 'block';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            document.querySelectorAll('.nav-link').forEach(l => l.classList.remove('active'));
            const analyticsLink = document.querySelector('[data-tab="analytics"]');
            if (analyticsLink) {
                analyticsLink.classList.add('active');
            }
            
            this.refreshData();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
        }
    }

    // –°–∫—Ä—ã—Ç—å —Å–µ–∫—Ü–∏—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    hide() {
        try {
            const analyticsSection = document.getElementById('analytics-section');
            if (analyticsSection) {
                analyticsSection.style.display = 'none';
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–∏–µ –≤–∫–ª–∞–¥–∫–∏
    handleTabSwitch() {
        this.hide();
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
function initAnalyticsUI() {
    if (!window.analyticsUI) {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Analytics UI...');
        try {
            window.analyticsUI = new AnalyticsUI();
            console.log('Analytics UI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:', window.analyticsUI);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Analytics UI:', error);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É, –µ—Å–ª–∏ DOM –≥–æ—Ç–æ–≤
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAnalyticsUI);
} else {
    // DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
    initAnalyticsUI();
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
setTimeout(initAnalyticsUI, 100);

// –ï—â–µ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 500–º—Å –¥–ª—è —Å–ª—É—á–∞–µ–≤ –º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
setTimeout(initAnalyticsUI, 500); 