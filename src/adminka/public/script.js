// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let cpuChart, memoryChart, diskChart;
let cpuTrendChart, memoryTrendChart, diskTrendChart;
let currentTab = 'status';
let currentUser = null;
let adminCredentials = {
    username: 'admin',
    password: 'qwe'
};

let allComplaints = [];
let complaints = [];
let improvements = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    setupLoginForm();
    checkAuthStatus();
    setupTabNavigation();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
function setupLoginForm() {
    const loginForm = document.getElementById('login-form');
    const usernameInput = document.getElementById('username');
    const passwordInput = document.getElementById('password');
    
    loginForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const username = usernameInput.value.trim();
        const password = passwordInput.value;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const submitBtn = loginForm.querySelector('button[type="submit"]');
        const originalText = submitBtn.textContent;
        submitBtn.textContent = '–ü—Ä–æ–≤–µ—Ä–∫–∞...';
        submitBtn.disabled = true;
        
        try {
            const isAuthenticated = await authenticateUser(username, password);
            if (isAuthenticated) {
                loginSuccess(username, password);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–µ –≤—Ö–æ–¥–∞:', error);
            showLoginError(`–û—à–∏–±–∫–∞: ${error.message}`);
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            submitBtn.textContent = originalText;
            submitBtn.disabled = false;
        }
    });
    
    // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –ª–æ–≥–∏–Ω–∞
    usernameInput.focus();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ –ø–æ–ª—è—Ö
    usernameInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            passwordInput.focus();
        }
    });
    
    passwordInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            loginForm.dispatchEvent(new Event('submit'));
        }
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function checkAuthStatus() {
    const savedUser = localStorage.getItem('admin_user');
    const savedTimestamp = localStorage.getItem('admin_timestamp');
    
    if (savedUser && savedTimestamp) {
        const now = Date.now();
        const sessionTime = 8 * 60 * 60 * 1000; // 8 —á–∞—Å–æ–≤
        
        if (now - parseInt(savedTimestamp) < sessionTime) {
            // –°–µ—Å—Å–∏—è –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
            currentUser = savedUser;
            const savedPassword = localStorage.getItem('admin_password');
            if (savedPassword) {
                loginSuccess(savedUser, savedPassword, false);
            } else {
                // –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
                showLoginModal();
            }
        } else {
            // –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞
            localStorage.removeItem('admin_user');
            localStorage.removeItem('admin_timestamp');
            showLoginModal();
        }
    } else {
        showLoginModal();
    }
}

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function authenticateUser(username, password) {
    try {
        console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', { username, password: '***' });
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const debugResponse = await fetch('/api/auth-debug');
        const debugData = await debugResponse.json();
        console.log('üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', debugData);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const localAuth = username === adminCredentials.username && password === adminCredentials.password;
        console.log('üîç –õ–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:', localAuth);
        
        // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Ö–æ–¥
        if (localAuth) {
            console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API
        const response = await fetch('/api/ssh-test', {
            headers: {
                'x-admin-username': username,
                'x-admin-password': password,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('üîç API –æ—Ç–≤–µ—Ç —Å—Ç–∞—Ç—É—Å:', response.status);
        
        if (response.ok) {
            console.log('‚úÖ API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
            return true;
        } else {
            const errorData = await response.json();
            console.log('‚ùå API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', errorData);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            showLoginError(`–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${errorData.error}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.`);
            return false;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        
        // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const localAuth = username === adminCredentials.username && password === adminCredentials.password;
        if (localAuth) {
            console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ (API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)');
            return true;
        }
        
        showLoginError(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
        return false;
    }
}

// –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
function loginSuccess(username, password, saveSession = true) {
    currentUser = username;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API –∑–∞–ø—Ä–æ—Å–∞—Ö
    adminCredentials.username = username;
    adminCredentials.password = password;
    
    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', { username, password: '***' });
    console.log('‚úÖ adminCredentials –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', adminCredentials);
    
    if (saveSession) {
        localStorage.setItem('admin_user', username);
        localStorage.setItem('admin_timestamp', Date.now().toString());
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –≤ localStorage (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è production)
        localStorage.setItem('admin_password', password);
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    document.getElementById('login-modal').style.display = 'none';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–Ω–µ–ª—å
    document.getElementById('main-container').style.display = 'flex';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    document.getElementById('current-user').textContent = username;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª—å
    initializePanel();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –≤—Ö–æ–¥–∞
function showLoginError(message) {
    const errorElement = document.getElementById('login-error');
    const errorMessage = document.getElementById('error-message');
    
    errorMessage.textContent = message;
    errorElement.style.display = 'flex';
    
    // –°–∫—Ä—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        errorElement.style.display = 'none';
    }, 3000);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
function showLoginModal() {
    document.getElementById('login-modal').style.display = 'flex';
    document.getElementById('main-container').style.display = 'none';
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
    document.getElementById('username').value = '';
    document.getElementById('password').value = '';
    document.getElementById('login-error').style.display = 'none';
}

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
function logout() {
    currentUser = null;
    adminCredentials.username = null;
    adminCredentials.password = null;
    
    localStorage.removeItem('admin_user');
    localStorage.removeItem('admin_timestamp');
    localStorage.removeItem('admin_password');
    
    showLoginModal();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
function initializePanel() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏...');
    console.log('adminCredentials –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', adminCredentials);
    
    initializeCharts();
    initializeTrendCharts();
    setupTabNavigation();
    setupFilters();
    loadInitialData();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    setInterval(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
        if (!adminCredentials || !adminCredentials.password) {
            console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –Ω–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
            return;
        }
        
        console.log('–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
        if (currentTab === 'status') {
            refreshServerStatus();
            refreshStats();
        } else if (currentTab === 'complaints') {
            refreshComplaints();
            refreshComplaintsStats();
        } else if (currentTab === 'logs') {
            // –î–ª—è –ª–æ–≥–æ–≤ –Ω–µ –¥–µ–ª–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω real-time —Ä–µ–∂–∏–º
            if (realTimeLogsInterval) {
                loadServerLogs();
            }
        }
    }, 60000); // 60 —Å–µ–∫—É–Ω–¥
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Analytics UI
    if (!window.analyticsUI) {
        console.log('Analytics UI –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...');
        setTimeout(() => {
            if (typeof AnalyticsUI !== 'undefined') {
                window.analyticsUI = new AnalyticsUI();
                console.log('Analytics UI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞');
            } else {
                console.log('–ö–ª–∞—Å—Å AnalyticsUI –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
        }, 200);
    } else {
        console.log('Analytics UI —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ç—Ä–µ–Ω–¥–æ–≤
function initializeTrendCharts() {
    const chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                display: false
            }
        },
        scales: {
            x: {
                display: true,
                title: {
                    display: true,
                    text: '–í—Ä–µ–º—è'
                },
                grid: {
                    color: 'rgba(0,0,0,0.1)'
                }
            },
            y: {
                display: true,
                title: {
                    display: true,
                    text: '–ü—Ä–æ—Ü–µ–Ω—Ç (%)'
                },
                min: 0,
                max: 100,
                grid: {
                    color: 'rgba(0,0,0,0.1)'
                }
            }
        },
        elements: {
            point: {
                radius: 3,
                hoverRadius: 5
            },
            line: {
                tension: 0.4
            }
        }
    };

    // CPU —Ç—Ä–µ–Ω–¥ –≥—Ä–∞—Ñ–∏–∫
    const cpuTrendCtx = document.getElementById('cpu-trend-chart').getContext('2d');
    cpuTrendChart = new Chart(cpuTrendCtx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: 'CPU (%)',
                data: [],
                borderColor: '#ff6b6b',
                backgroundColor: 'rgba(255, 107, 107, 0.1)',
                borderWidth: 2,
                fill: true
            }]
        },
        options: chartOptions
    });

    // Memory —Ç—Ä–µ–Ω–¥ –≥—Ä–∞—Ñ–∏–∫
    const memoryTrendCtx = document.getElementById('memory-trend-chart').getContext('2d');
    memoryTrendChart = new Chart(memoryTrendCtx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: 'Memory (%)',
                data: [],
                borderColor: '#4834d4',
                backgroundColor: 'rgba(72, 52, 212, 0.1)',
                borderWidth: 2,
                fill: true
            }]
        },
        options: chartOptions
    });

    // Disk —Ç—Ä–µ–Ω–¥ –≥—Ä–∞—Ñ–∏–∫
    const diskTrendCtx = document.getElementById('disk-trend-chart').getContext('2d');
    diskTrendChart = new Chart(diskTrendCtx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: 'Disk (%)',
                data: [],
                borderColor: '#00b894',
                backgroundColor: 'rgba(0, 184, 148, 0.1)',
                borderWidth: 2,
                fill: true
            }]
        },
        options: chartOptions
    });
}

// WebSocket —É–±—Ä–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä—É–≥–æ–≤—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º
function initializeCharts() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä—É–≥–æ–≤—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä–∞—Ñ–∏–∫–∏ –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    if (cpuChart || memoryChart || diskChart) {
        console.log('–ì—Ä–∞—Ñ–∏–∫–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return;
    }
    
    const chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                position: 'bottom',
                labels: {
                    padding: 20,
                    usePointStyle: true
                }
            }
        }
    };

    // CPU –¥–∏–∞–≥—Ä–∞–º–º–∞
    const cpuCtx = document.getElementById('cpu-chart').getContext('2d');
    cpuChart = new Chart(cpuCtx, {
        type: 'doughnut',
        data: {
            labels: ['–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ', '–°–≤–æ–±–æ–¥–Ω–æ'],
            datasets: [{
                data: [0, 100],
                backgroundColor: ['#ff6b6b', '#f8f9fa'],
                borderWidth: 0
            }]
        },
        options: chartOptions
    });

    // Memory –¥–∏–∞–≥—Ä–∞–º–º–∞
    const memoryCtx = document.getElementById('memory-chart').getContext('2d');
    memoryChart = new Chart(memoryCtx, {
        type: 'doughnut',
        data: {
            labels: ['–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ', '–°–≤–æ–±–æ–¥–Ω–æ'],
            datasets: [{
                data: [0, 100],
                backgroundColor: ['#4834d4', '#f8f9fa'],
                borderWidth: 0
            }]
        },
        options: chartOptions
    });

    // Disk –¥–∏–∞–≥—Ä–∞–º–º–∞
    const diskCtx = document.getElementById('disk-chart').getContext('2d');
    diskChart = new Chart(diskCtx, {
        type: 'doughnut',
        data: {
            labels: ['–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ', '–°–≤–æ–±–æ–¥–Ω–æ'],
            datasets: [{
                data: [0, 100],
                backgroundColor: ['#00b894', '#f8f9fa'],
                borderWidth: 0
            }]
        },
        options: chartOptions
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≤–∫–ª–∞–¥–∫–∞–º
function setupTabNavigation() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    const complaintsTab = document.getElementById('tab-complaints');
    const improvementsTab = document.getElementById('tab-improvements');
    
    if (complaintsTab) {
        complaintsTab.addEventListener('click', () => showTab('complaints'));
    }
    
    if (improvementsTab) {
        improvementsTab.addEventListener('click', () => showTab('improvements'));
    }
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ HTML —á–µ—Ä–µ–∑ data-tab –∞—Ç—Ä–∏–±—É—Ç—ã
    console.log('–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function setupFilters() {
  // –£–¥–∞–ª—è—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
  // –ù–∞–ø—Ä–∏–º–µ—Ä:
  // document.getElementById('type-filter').addEventListener('change', filterComplaints);
  // document.getElementById('category-filter').addEventListener('change', filterComplaints);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤–∫–ª–∞–¥–∫—É
function showTab(tabName) {
    currentTab = tabName;
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    document.querySelectorAll('.nav-link').forEach(tab => tab.classList.remove('active'));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
    const activeNavLink = document.querySelector(`[data-tab="${tabName}"]`);
    if (activeNavLink) {
        activeNavLink.classList.add('active');
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–Ω—Ç—ã –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.tab-content').forEach(tc => tc.style.display = 'none');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    const tabContent = document.getElementById(tabName + '-tab');
    if (tabContent) {
        tabContent.style.display = 'block';
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
    if (tabName === 'complaints') {
        refreshComplaints();
        refreshComplaintsStats();
    } else if (tabName === 'status') {
        refreshServerStatus();
        refreshStats();
    } else if (tabName === 'logs') {
        loadContainersList();
    } else if (tabName === 'errors') {
        refreshClientErrors();
    }
    
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tabName);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function loadInitialData() {
    refreshServerStatus();
    refreshStats();
    refreshComplaints();
    refreshComplaintsStats();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ç—Ä–µ–Ω–¥–æ–≤
function updateTrendCharts(stats) {
    if (stats.cpu) {
        cpuTrendChart.data.labels = stats.cpu.labels;
        cpuTrendChart.data.datasets[0].data = stats.cpu.data;
        cpuTrendChart.update('none');
    }
    
    if (stats.memory) {
        memoryTrendChart.data.labels = stats.memory.labels;
        memoryTrendChart.data.datasets[0].data = stats.memory.data;
        memoryTrendChart.update('none');
    }
    
    if (stats.disk) {
        diskTrendChart.data.labels = stats.disk.labels;
        diskTrendChart.data.datasets[0].data = stats.disk.data;
        diskTrendChart.update('none');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function refreshStats() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if (!adminCredentials || !adminCredentials.password) {
        console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - –Ω–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
        return;
    }
    
    try {
        console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
        console.log('adminCredentials –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', adminCredentials);
        
        const [statsResponse, summaryResponse] = await Promise.all([
            fetch(`/api/stats`, {
                headers: {
                    'x-admin-username': adminCredentials.username,
                    'x-admin-password': adminCredentials.password,
                    'Content-Type': 'application/json'
                }
            }),
            fetch(`/api/stats-summary`, {
                headers: {
                    'x-admin-username': adminCredentials.username,
                    'x-admin-password': adminCredentials.password,
                    'Content-Type': 'application/json'
                }
            })
        ]);

        console.log('–û—Ç–≤–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', statsResponse.status, statsResponse.statusText);
        console.log('–û—Ç–≤–µ—Ç —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', summaryResponse.status, summaryResponse.statusText);

        if (statsResponse.ok) {
            const stats = await statsResponse.json();
            updateTrendCharts(stats);
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', statsResponse.status);
        }

        if (summaryResponse.ok) {
            const summary = await summaryResponse.json();
            updateStatsSummary(summary);
        } else {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', summaryResponse.status);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStatsSummary(summary) {
    if (summary.cpu) {
        document.getElementById('cpu-current').textContent = summary.cpu.current.toFixed(1);
        document.getElementById('cpu-average').textContent = summary.cpu.average.toFixed(1);
        document.getElementById('cpu-max').textContent = summary.cpu.max.toFixed(1);
    }
    
    if (summary.memory) {
        document.getElementById('memory-current').textContent = summary.memory.current.toFixed(1);
        document.getElementById('memory-average').textContent = summary.memory.average.toFixed(1);
        document.getElementById('memory-max').textContent = summary.memory.max.toFixed(1);
    }
    
    if (summary.disk) {
        document.getElementById('disk-current').textContent = summary.disk.current.toFixed(1);
        document.getElementById('disk-average').textContent = summary.disk.average.toFixed(1);
        document.getElementById('disk-max').textContent = summary.disk.max.toFixed(1);
    }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function testSSHConnection() {
  try {
    console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    const response = await fetch(`/api/ssh-test`, {
      headers: {
        'x-admin-username': adminCredentials.username,
        'x-admin-password': adminCredentials.password,
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SSH: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    
    if (data.success) {
      alert('‚úÖ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    } else {
      alert('‚ùå SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ' + (data.error || data.message));
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SSH:', error);
    alert('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SSH: ' + error.message);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function refreshServerStatus() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
  if (!adminCredentials || !adminCredentials.password) {
    console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ - –Ω–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    return;
  }
  
  try {
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    console.log('adminCredentials:', adminCredentials);
    console.log('–ü–∞—Ä–æ–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', adminCredentials.password ? '***' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    
    const response = await fetch(`/api/server-status`, {
      headers: {
        'x-admin-username': adminCredentials.username,
        'x-admin-password': adminCredentials.password,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞:', response.status, response.statusText);
    
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    updateSystemMetrics(data.system);
    updateDockerTable(data.docker.containers);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    showError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–∞');
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
function updateSystemMetrics(system) {
    if (!system || !system.cpu || !system.memory || !system.disk || !system.disk[0]) return;
    // CPU
    const cpuLoad = system.cpu.load.toFixed(1);
    document.getElementById('cpu-load').textContent = cpuLoad + '%';
    document.getElementById('cpu-progress').style.width = cpuLoad + '%';
    // Memory
    const memoryPercent = parseFloat(system.memory.usedPercent);
    document.getElementById('memory-usage').textContent = memoryPercent + '%';
    document.getElementById('memory-progress').style.width = memoryPercent + '%';
    // Disk (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–∏—Å–∫)
    const diskPercent = parseFloat(system.disk[0].usedPercent);
    document.getElementById('disk-usage').textContent = diskPercent + '%';
    document.getElementById('disk-progress').style.width = diskPercent + '%';
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—ã
    updateChart(cpuChart, cpuLoad, 100 - cpuLoad);
    updateChart(memoryChart, memoryPercent, 100 - memoryPercent);
    updateChart(diskChart, diskPercent, 100 - diskPercent);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
function updateChart(chart, used, free) {
    chart.data.datasets[0].data = [used, free];
    chart.update();
}

// –û–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
const dockerDescriptions = {
    'willowe_admin_panel': '–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω–∫–∏ Willowe',
    'dating_app_server': '–û—Å–Ω–æ–≤–Ω–æ–π backend-—Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
    'dating_app_kafka_ui': '–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Kafka',
    'dating_app_alloy': '–ê–≥–µ–Ω—Ç —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ (Grafana Alloy)',
    'dating_app_kafka_exporter': '–≠–∫—Å–ø–æ—Ä—Ç–µ—Ä –º–µ—Ç—Ä–∏–∫ Kafka –¥–ª—è Prometheus',
    'dating_app_kafka': '–ë—Ä–æ–∫–µ—Ä Kafka (–æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π)',
    'dating_app_redis_exporter': '–≠–∫—Å–ø–æ—Ä—Ç–µ—Ä –º–µ—Ç—Ä–∏–∫ Redis –¥–ª—è Prometheus',
    'dating_app_zookeeper': '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä Kafka (Zookeeper)',
    'dating_app_mongodb': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö MongoDB',
    'dating_app_node_exporter': '–≠–∫—Å–ø–æ—Ä—Ç–µ—Ä –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Prometheus',
    'dating_app_redis': '–ö—ç—à –∏ –±—Ä–æ–∫–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π Redis'
};

// –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
let expandedContainers = {};

function updateDockerTable(containers) {
    const container = document.getElementById('docker-table-container');
    if (!containers || containers.length === 0) {
        container.innerHTML = '<p style="text-align: center; color: #666; padding: 20px;">–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤</p>';
        return;
    }
    let tableHTML = `
        <table class="table">
            <thead>
                <tr>
                    <th>–ò–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–ü–æ—Ä—Ç—ã</th>
                </tr>
            </thead>
            <tbody>
    `;
    containers.forEach(containerData => {
        const statusClass = containerData.status.includes('Up') ? 'status-running' : 'status-stopped';
        const statusText = containerData.status.includes('Up') ? '–ó–∞–ø—É—â–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
        const isExpanded = expandedContainers[containerData.name];
        tableHTML += `
            <tr class="docker-row" data-name="${containerData.name}">
                <td>${containerData.name}</td>
                <td><span class="status-badge ${statusClass}">${statusText}</span></td>
                <td>${containerData.ports || '-'}</td>
            </tr>
            <tr class="docker-details-row" style="display: ${isExpanded ? 'table-row' : 'none'}; background: #f8f9fa;">
                <td colspan="3">
                    <div style="padding: 15px 10px;">
                        <div style="margin-bottom: 10px;"><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${dockerDescriptions[containerData.name] || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}</div>
                        <div style="margin-bottom: 10px;">
                            <strong>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</strong>
                            <button class="refresh-btn" onclick="showDockerActionModal('${containerData.name}', 'restart')"><i class="fas fa-sync-alt"></i> –†–µ—Å—Ç–∞—Ä—Ç</button>
                            <button class="refresh-btn" onclick="showDockerActionModal('${containerData.name}', 'stop')"><i class="fas fa-stop"></i> –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
                            <button class="refresh-btn" onclick="showDockerActionModal('${containerData.name}', 'start')"><i class="fas fa-play"></i> –ó–∞–ø—É—Å—Ç–∏—Ç—å</button>
                        </div>
                        <div style="font-size: 13px; color: #888;">
                            <b>–ö–æ–º–∞–Ω–¥—ã:</b><br>
                            <code>docker restart ${containerData.name}</code><br>
                            <code>docker stop ${containerData.name}</code><br>
                            <code>docker start ${containerData.name}</code>
                        </div>
                    </div>
                </td>
            </tr>
        `;
    });
    tableHTML += '</tbody></table>';
    container.innerHTML = tableHTML;
    // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    document.querySelectorAll('.docker-row').forEach(row => {
        row.addEventListener('click', function() {
            const name = this.getAttribute('data-name');
            expandedContainers[name] = !expandedContainers[name];
            updateDockerTable(containers);
        });
    });
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
function showDockerActionModal(containerName, action) {
    const actionText = {
        'restart': '—Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å',
        'stop': '–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
        'start': '–∑–∞–ø—É—Å—Ç–∏—Ç—å'
    };
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
        <div class="modal-content" style="max-width: 400px;">
            <div class="modal-header" style="background: #667eea; color: white; border-radius: 20px 20px 0 0;">
                <h2>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</h2>
            </div>
            <div class="modal-body" style="padding: 30px;">
                <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ <b>${actionText[action]}</b> –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä <b>${containerName}</b>?</p>
                <div style="display: flex; gap: 10px; margin-top: 20px;">
                    <button class="refresh-btn" style="background: #00b894; color: white;" onclick="confirmDockerAction('${containerName}', '${action}', this)">–î–∞</button>
                    <button class="refresh-btn" style="background: #ff6b6b; color: white;" onclick="this.closest('.modal').remove()">–ù–µ—Ç</button>
                </div>
            </div>
        </div>
    `;
    document.body.appendChild(modal);
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
async function startAllContainers() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!adminCredentials || !adminCredentials.password) {
        alert('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è.');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
        <div class="modal-content" style="max-width: 500px;">
            <div class="modal-header" style="background: linear-gradient(45deg, #28a745, #20c997); color: white; border-radius: 20px 20px 0 0;">
                <h2><i class="fas fa-play-circle"></i> –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤</h2>
            </div>
            <div class="modal-body" style="padding: 30px;">
                <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å <b>–≤—Å–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã</b>?</p>
                <p style="color: #666; font-size: 14px;">–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø—É—Å—Ç–∏—Ç –≤—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.</p>
                <div style="display: flex; gap: 10px; margin-top: 20px;">
                    <button class="refresh-btn" id="start-all-btn" style="background: linear-gradient(45deg, #28a745, #20c997); color: white;" onclick="executeStartAllContainers(this)">
                        <i class="fas fa-play-circle"></i> –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ
                    </button>
                    <button class="refresh-btn" style="background: #6c757d; color: white;" onclick="this.closest('.modal').remove()">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                </div>
            </div>
        </div>
    `;
    document.body.appendChild(modal);
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
async function executeStartAllContainers(btn) {
    btn.disabled = true;
    btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...';
    
    try {
        console.log('–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...');
        console.log('–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', adminCredentials.password ? '***' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        
        const response = await fetch('/api/docker-start-all', {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json',
                'x-admin-username': adminCredentials.username,
                'x-admin-password': adminCredentials.password
            }
        });
        
        console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:', data);
        
        if (data.success) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            showStartAllResults(data);
        } else {
            alert('‚ùå –û—à–∏–±–∫–∞: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:', error);
        alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
    } finally {
        // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        document.querySelectorAll('.modal').forEach(m => m.remove());
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
        refreshServerStatus();
    }
}

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
function showStartAllResults(data) {
    const modal = document.createElement('div');
    modal.className = 'modal';
    
    let resultsHtml = '';
    if (data.results && data.results.length > 0) {
        resultsHtml = '<div style="max-height: 300px; overflow-y: auto; margin-top: 15px;">';
        data.results.forEach(result => {
            const statusIcon = result.status === 'success' ? '‚úÖ' : '‚ùå';
            const statusColor = result.status === 'success' ? '#28a745' : '#dc3545';
            resultsHtml += `
                <div style="padding: 8px; border-bottom: 1px solid #eee; display: flex; justify-content: space-between; align-items: center;">
                    <span style="font-weight: 600;">${result.container}</span>
                    <span style="color: ${statusColor}; font-weight: 600;">${statusIcon} ${result.status === 'success' ? '–ó–∞–ø—É—â–µ–Ω' : '–û—à–∏–±–∫–∞'}</span>
                </div>
            `;
            if (result.error) {
                resultsHtml += `
                    <div style="padding: 8px; background: #f8f9fa; border-radius: 4px; margin-bottom: 8px; font-size: 12px; color: #666;">
                        ${result.error}
                    </div>
                `;
            }
        });
        resultsHtml += '</div>';
    }
    
    modal.innerHTML = `
        <div class="modal-content" style="max-width: 600px;">
            <div class="modal-header" style="background: linear-gradient(45deg, #28a745, #20c997); color: white; border-radius: 20px 20px 0 0;">
                <h2><i class="fas fa-check-circle"></i> –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞</h2>
            </div>
            <div class="modal-body" style="padding: 30px;">
                <div style="text-align: center; margin-bottom: 20px;">
                    <div style="font-size: 48px; margin-bottom: 10px;">${data.started > 0 ? '‚úÖ' : '‚ùå'}</div>
                    <h3 style="color: ${data.started > 0 ? '#28a745' : '#dc3545'};">${data.message}</h3>
                    <p style="color: #666;">–£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ: <strong>${data.started}</strong> –∏–∑ <strong>${data.total}</strong> –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤</p>
                </div>
                ${resultsHtml}
                <div style="text-align: center; margin-top: 20px;">
                    <button class="refresh-btn" style="background: linear-gradient(45deg, #667eea, #764ba2); color: white;" onclick="this.closest('.modal').remove()">
                        –ó–∞–∫—Ä—ã—Ç—å
                    </button>
                </div>
            </div>
        </div>
    `;
    document.body.appendChild(modal);
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
function confirmDockerAction(containerName, action, btn) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!adminCredentials || !adminCredentials.password) {
        alert('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è.');
        document.querySelectorAll('.modal').forEach(m => m.remove());
        return;
    }
    
    btn.disabled = true;
    btn.textContent = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...';
    
    console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Docker –¥–µ–π—Å—Ç–≤–∏—è:');
    console.log('  - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:', containerName);
    console.log('  - –î–µ–π—Å—Ç–≤–∏–µ:', action);
    console.log('  - –ü–∞—Ä–æ–ª—å:', adminCredentials.password ? '***' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    console.log('  - adminCredentials:', adminCredentials);
    
    fetch(`/api/docker-action`, {
        method: 'POST',
        headers: { 
            'Content-Type': 'application/json',
            'x-admin-username': adminCredentials.username,
            'x-admin-password': adminCredentials.password
        },
        body: JSON.stringify({ name: containerName, action })
    })
    .then(res => {
        console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Docker action:', res.status, res.statusText);
        if (!res.ok) {
            throw new Error(`HTTP ${res.status}: ${res.statusText}`);
        }
        return res.json();
    })
    .then(data => {
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç Docker –¥–µ–π—Å—Ç–≤–∏—è:', data);
        alert(data.success ? '–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!' : ('–û—à–∏–±–∫–∞: ' + (data.error || '')));
        document.querySelectorAll('.modal').forEach(m => m.remove());
        refreshServerStatus();
    })
    .catch(err => {
        console.error('–û—à–∏–±–∫–∞ Docker –¥–µ–π—Å—Ç–≤–∏—è:', err);
        alert('–û—à–∏–±–∫–∞: ' + err.message);
        document.querySelectorAll('.modal').forEach(m => m.remove());
    });
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∂–∞–ª–æ–±
let complaintsStats = {};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∂–∞–ª–æ–±
async function refreshComplaints() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
  if (!adminCredentials || !adminCredentials.password) {
    console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∂–∞–ª–æ–± - –Ω–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    return;
  }
  
  try {
    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –∂–∞–ª–æ–±—ã...');
    console.log('adminCredentials –¥–ª—è –∂–∞–ª–æ–±:', adminCredentials);
    console.log('–ü–∞—Ä–æ–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∂–∞–ª–æ–±:', adminCredentials.password ? '***' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    
    const response = await fetch(`/api/all-complaints`, {
      headers: {
        'x-admin-username': adminCredentials.username,
        'x-admin-password': adminCredentials.password,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∂–∞–ª–æ–±:', response.status, response.statusText);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', errorText);
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–±: ${response.status} ${response.statusText} - ${errorText}`);
    }
    
    allComplaints = await response.json();
    console.log('–ü–æ–ª—É—á–µ–Ω–æ –∂–∞–ª–æ–±:', allComplaints.length);
    console.log('–ü–µ—Ä–≤–∞—è –∂–∞–ª–æ–±–∞:', allComplaints[0]);
    
    updateComplaintsList(allComplaints);
    updateComplaintsCount(allComplaints.length);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∂–∞–ª–æ–±:', error);
    showComplaintsPlaceholder();
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∂–∞–ª–æ–±
async function refreshComplaintsStats() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
  if (!adminCredentials || !adminCredentials.password) {
    console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∂–∞–ª–æ–± - –Ω–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    return;
  }
  
  try {
    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∂–∞–ª–æ–±...');
    console.log('–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', adminCredentials.password ? '***' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    
    const response = await fetch(`/api/complaints-stats`, {
      headers: {
        'x-admin-username': adminCredentials.username,
        'x-admin-password': adminCredentials.password,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', response.status, response.statusText);
    
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∂–∞–ª–æ–±: ${response.status} ${response.statusText}`);
    }
    
    complaintsStats = await response.json();
    console.log('–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', complaintsStats);
    updateComplaintsStats(complaintsStats);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∂–∞–ª–æ–±:', error);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function updateComplaintsStats(stats) {
  document.getElementById('total-complaints').textContent = stats.total || 0;
  document.getElementById('today-complaints').textContent = stats.today || 0;
  document.getElementById('active-complaints').textContent = stats.total || 0; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–µ
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∂–∞–ª–æ–±
function updateComplaintsCount(count) {
  document.getElementById('complaints-count').textContent = `–ü–æ–∫–∞–∑–∞–Ω–æ: ${count} –∂–∞–ª–æ–±`;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∂–∞–ª–æ–±
function updateComplaintsList(list, containerId = 'complaints-container') {
    const container = document.getElementById(containerId);
    if (!container) {
        console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∂–∞–ª–æ–± –Ω–µ –Ω–∞–π–¥–µ–Ω:', containerId);
        return;
    }
    if (!list || list.length === 0) {
        container.innerHTML = '<p style="text-align: center; color: #666; padding: 20px;">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>';
        return;
    }
    let complaintsHTML = '';
    list.forEach(complaint => {
        const date = new Date(complaint.createdAt).toLocaleString('ru-RU');
        complaintsHTML += `
            <div class="complaint-item">
                <div class="complaint-header">
                    <span class="complaint-type">${getComplaintTypeText(complaint.complaintType)}</span>
                    <span class="complaint-date">${date}</span>
                </div>
                <div class="complaint-text">${complaint.complaintText}</div>
                <div class="complaint-meta">
                    <span><strong>–û—Ç:</strong> ${complaint.senderEmail}</span>
                    <span><strong>–ù–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong> ${complaint.reportedUserId}</span>
                    <span><strong>–¢–∏–ø:</strong> ${getComplaintCategoryText(complaint.type)}</span>
                </div>
            </div>
        `;
    });
    container.innerHTML = complaintsHTML;
}

function updateImprovementsCount(count) {
    document.getElementById('improvements-count').textContent = `–ü–æ–∫–∞–∑–∞–Ω–æ: ${count} —É–ª—É—á—à–µ–Ω–∏–π`;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –∂–∞–ª–æ–±
function showComplaintsPlaceholder(containerId = 'complaints-container') {
    const container = document.getElementById(containerId);
    if (!container) {
        console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∂–∞–ª–æ–± –Ω–µ –Ω–∞–π–¥–µ–Ω:', containerId);
        return;
    }
    container.innerHTML = `
        <div style="text-align: center; padding: 40px; color: #666;">
            <i class="fas fa-info-circle" style="font-size: 48px; margin-bottom: 20px; color: #667eea;"></i>
            <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∂–∞–ª–æ–±</h3>
            <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∂–∞–ª–æ–±—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.</p>
        </div>
    `;
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ç–∏–ø–∞ –∂–∞–ª–æ–±—ã
function getComplaintTypeText(type) {
    const types = {
        'SPAM': '–°–ø–∞–º',
        'FAKE_PROFILE': '–§–µ–π–∫–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å',
        'INSULT': '–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è',
        'HARASSMENT': '–î–æ–º–æ–≥–∞—Ç–µ–ª—å—Å—Ç–≤–∞',
        'SCAM': '–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ',
        'OTHER': '–î—Ä—É–≥–æ–µ',
        'IMPROVEMENTS': '–£–ª—É—á—à–µ–Ω–∏—è',
        'ISSUES': '–ü—Ä–æ–±–ª–µ–º—ã'
    };
    return types[type] || type;
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∂–∞–ª–æ–±—ã
function getComplaintCategoryText(category) {
    const categories = {
        'complain': '–ñ–∞–ª–æ–±–∞',
        'improve_and_problem': '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–ü—Ä–æ–±–ª–µ–º–∞'
    };
    return categories[category] || category;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
function showError(message) {
    const container = document.getElementById(currentTab === 'status' ? 'docker-table-container' : 'complaints-container');
    container.innerHTML = `
        <div style="text-align: center; padding: 40px; color: #dc3545;">
            <i class="fas fa-exclamation-triangle" style="font-size: 48px; margin-bottom: 20px;"></i>
            <h3>–û—à–∏–±–∫–∞</h3>
            <p>${message}</p>
        </div>
    `;
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –∂–∞–ª–æ–±–∞–º
function applyComplaintsFilters() {
  const typeFilter = document.getElementById('type-filter').value;
  const categoryFilter = document.getElementById('category-filter').value;
  
  let filteredComplaints = allComplaints || [];
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∂–∞–ª–æ–±—ã
  if (typeFilter) {
    filteredComplaints = filteredComplaints.filter(complaint => 
      complaint.complaintType === typeFilter
    );
  }
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  if (categoryFilter) {
    filteredComplaints = filteredComplaints.filter(complaint => 
      complaint.type === categoryFilter
    );
  }
  
  console.log(`–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã. –ü–æ–∫–∞–∑–∞–Ω–æ ${filteredComplaints.length} –∏–∑ ${allComplaints.length} –∂–∞–ª–æ–±`);
  updateComplaintsList(filteredComplaints);
  updateComplaintsCount(filteredComplaints.length);
}

// –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∂–∞–ª–æ–±
function clearComplaintsFilters() {
  document.getElementById('type-filter').value = '';
  document.getElementById('category-filter').value = '';
  
  console.log('–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã. –ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –∂–∞–ª–æ–±—ã');
  updateComplaintsList(allComplaints);
  updateComplaintsCount(allComplaints.length);
}

// –≠–∫—Å–ø–æ—Ä—Ç –∂–∞–ª–æ–± –≤ CSV
function exportComplaintsToCSV() {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∂–∞–ª–æ–±—ã, –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
  const typeFilter = document.getElementById('type-filter').value;
  const categoryFilter = document.getElementById('category-filter').value;
  
  let complaintsToExport = allComplaints || [];
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ –∂–µ —Ñ–∏–ª—å—Ç—Ä—ã, —á—Ç–æ –∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  if (typeFilter) {
    complaintsToExport = complaintsToExport.filter(complaint => 
      complaint.complaintType === typeFilter
    );
  }
  
  if (categoryFilter) {
    complaintsToExport = complaintsToExport.filter(complaint => 
      complaint.type === categoryFilter
    );
  }
  
  if (complaintsToExport.length === 0) {
    alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º CSV –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const headers = [
    '–î–∞—Ç–∞',
    '–¢–∏–ø –∂–∞–ª–æ–±—ã',
    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
    'Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è',
    'ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è',
    'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    '–¢–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã'
  ];
  
  // –°–æ–∑–¥–∞–µ–º CSV –¥–∞–Ω–Ω—ã–µ
  const csvData = complaintsToExport.map(complaint => [
    new Date(complaint.createdAt).toLocaleString('ru-RU'),
    getComplaintTypeText(complaint.complaintType),
    getComplaintCategoryText(complaint.type),
    complaint.senderEmail,
    complaint.senderId,
    complaint.reportedUserId,
    `"${complaint.complaintText.replace(/"/g, '""')}"` // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏
  ]);
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ
  const csvContent = [headers, ...csvData]
    .map(row => row.join(','))
    .join('\n');
  
  // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
  const blob = new Blob(['\ufeff' + csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', `complaints_${new Date().toISOString().split('T')[0]}.csv`);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –õ–û–ì–ê–ú–ò =====

let realTimeLogsInterval = null;
let currentLogs = '';

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
async function loadContainersList() {
  if (!adminCredentials || !adminCredentials.password) {
    console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ - –Ω–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    return;
  }

  try {
    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...');
    const response = await fetch('/api/containers', {
      headers: {
        'x-admin-username': adminCredentials.username,
        'x-admin-password': adminCredentials.password,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    if (data.success) {
      updateContainersSelect(data.containers);
    } else {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:', data.error);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:', error);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
function updateContainersSelect(containers) {
  const select = document.getElementById('container-select');
  if (!select) return;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  const currentValue = select.value;
  
  // –û—á–∏—â–∞–µ–º —Å–µ–ª–µ–∫—Ç
  select.innerHTML = '';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
  containers.forEach(container => {
    const option = document.createElement('option');
    option.value = container.name;
    option.textContent = `${container.name} (${container.status})`;
    select.appendChild(option);
  });
  
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ
  if (currentValue && containers.some(c => c.name === currentValue)) {
    select.value = currentValue;
  } else if (containers.length > 0) {
    select.value = containers[0].name;
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
async function loadServerLogs() {
  if (!adminCredentials || !adminCredentials.password) {
    console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ª–æ–≥–æ–≤ - –Ω–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    return;
  }

  const container = document.getElementById('container-select').value;
  const lines = document.getElementById('lines-count').value;
  
  try {
    console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ${container}, —Å—Ç—Ä–æ–∫: ${lines}`);
    updateLogsInfo('–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...');
    
    const response = await fetch(`/api/server-logs?container=${container}&lines=${lines}`, {
      headers: {
        'x-admin-username': adminCredentials.username,
        'x-admin-password': adminCredentials.password,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: ${response.status} ${response.statusText} - ${errorText}`);
    }

    const data = await response.json();
    if (data.success) {
      currentLogs = data.logs;
      updateLogsDisplay(data.logs);
      updateLogsInfo(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.logs.split('\n').length} —Å—Ç—Ä–æ–∫ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ${container}`);
    } else {
      throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤:', error);
    updateLogsDisplay(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤: ${error.message}`);
    updateLogsInfo('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤
function updateLogsDisplay(logs) {
  const container = document.getElementById('logs-container');
  if (!container) return;

  if (!logs || logs.trim() === '') {
    container.innerHTML = `
      <div style="text-align: center; color: #888; padding: 40px;">
        <i class="fas fa-file-alt" style="font-size: 48px; margin-bottom: 20px;"></i>
        <h3>–õ–æ–≥–∏ –ø—É—Å—Ç—ã</h3>
        <p>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–æ–≤</p>
      </div>
    `;
  } else {
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
    const formattedLogs = formatLogs(logs);
    container.innerHTML = formattedLogs;
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
    container.scrollTop = container.scrollHeight;
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
function formatLogs(logs) {
  return logs
    .split('\n')
    .map(line => {
      // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (line.toLowerCase().includes('error') || line.toLowerCase().includes('err')) {
        return `<span style="color: #ff6b6b;">${escapeHtml(line)}</span>`;
      }
      // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
      if (line.toLowerCase().includes('warn')) {
        return `<span style="color: #feca57;">${escapeHtml(line)}</span>`;
      }
      // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      if (line.toLowerCase().includes('success') || line.toLowerCase().includes('ok')) {
        return `<span style="color: #00b894;">${escapeHtml(line)}</span>`;
      }
      // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
      if (line.includes('GET ') || line.includes('POST ') || line.includes('PUT ') || line.includes('DELETE ')) {
        return `<span style="color: #667eea;">${escapeHtml(line)}</span>`;
      }
      return escapeHtml(line);
    })
    .join('\n');
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–≥–∞—Ö
function updateLogsInfo(info) {
  const infoElement = document.getElementById('logs-info');
  if (infoElement) {
    infoElement.textContent = info;
  }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
function toggleRealTimeLogs() {
  const btn = document.getElementById('realtime-btn');
  const isActive = btn.classList.contains('active');
  
  if (isActive) {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º real-time
    if (realTimeLogsInterval) {
      clearInterval(realTimeLogsInterval);
      realTimeLogsInterval = null;
    }
    btn.classList.remove('active');
    btn.innerHTML = '<i class="fas fa-play"></i> –†–µ–∞–ª—Ç–∞–π–º';
    btn.style.background = 'linear-gradient(45deg, #00b894, #00cec9)';
    updateLogsInfo('–†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  } else {
    // –ó–∞–ø—É—Å–∫–∞–µ–º real-time
    btn.classList.add('active');
    btn.innerHTML = '<i class="fas fa-pause"></i> –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å';
    btn.style.background = 'linear-gradient(45deg, #ff6b6b, #ee5a24)';
    updateLogsInfo('–†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–µ–Ω');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏ —Å—Ä–∞–∑—É
    loadServerLogs();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    realTimeLogsInterval = setInterval(() => {
      loadServerLogs();
    }, 5000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  }
}

// –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
function clearLogs() {
  const container = document.getElementById('logs-container');
  if (container) {
    container.innerHTML = `
      <div style="text-align: center; color: #888; padding: 40px;">
        <i class="fas fa-file-alt" style="font-size: 48px; margin-bottom: 20px;"></i>
        <h3>–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã</h3>
        <p>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏"</p>
      </div>
    `;
  }
  currentLogs = '';
  updateLogsInfo('–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã');
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
async function copyLogs() {
  if (!currentLogs) {
    alert('–ù–µ—Ç –ª–æ–≥–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
    return;
  }
  
  try {
    await navigator.clipboard.writeText(currentLogs);
    alert('–õ–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    alert('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤');
  }
}

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
function downloadLogs() {
  if (!currentLogs) {
    alert('–ù–µ—Ç –ª–æ–≥–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è');
    return;
  }
  
  const container = document.getElementById('container-select').value;
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const filename = `${container}_logs_${timestamp}.log`;
  
  const blob = new Blob([currentLogs], { type: 'text/plain;charset=utf-8' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', filename);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –û–®–ò–ë–ö–ê–ú–ò =====

let allClientErrors = [];

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
async function refreshClientErrors() {
  if (!adminCredentials || !adminCredentials.password) {
    console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ—à–∏–±–æ–∫ - –Ω–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    return;
  }

  try {
    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –æ—à–∏–±–∫–∏...');
    
    const response = await fetch('/api/client-errors', {
      headers: {
        'x-admin-username': adminCredentials.username,
        'x-admin-password': adminCredentials.password,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—à–∏–±–æ–∫: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    if (data.success) {
      allClientErrors = data.errors || [];
      updateErrorsDisplay(allClientErrors);
      updateErrorsStats(data.stats);
      updateErrorsCount(allClientErrors.length);
    } else {
      throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ—à–∏–±–æ–∫:', error);
    showErrorsPlaceholder();
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
function updateErrorsDisplay(errors) {
  const container = document.getElementById('errors-container');
  if (!container) return;

  if (!errors || errors.length === 0) {
    container.innerHTML = `
      <div style="text-align: center; padding: 40px; color: #666;">
        <i class="fas fa-check-circle" style="font-size: 48px; margin-bottom: 20px; color: #00b894;"></i>
        <h3>–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
        <p>–û—Ç–ª–∏—á–Ω–æ! –ö–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</p>
      </div>
    `;
    return;
  }

  let errorsHTML = '';
  errors.forEach(error => {
    const date = new Date(error.timestamp).toLocaleString('ru-RU');
    const severity = getErrorSeverity(error);
    const severityColor = getSeverityColor(severity);
    
    errorsHTML += `
      <div class="error-item" style="background: white; border: 1px solid #e9ecef; border-radius: 10px; padding: 20px; margin-bottom: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.05);">
        <div class="error-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; padding-bottom: 10px; border-bottom: 1px solid #f1f3f4;">
          <div style="display: flex; align-items: center; gap: 10px;">
            <span style="background: ${severityColor}; color: white; padding: 6px 12px; border-radius: 20px; font-size: 12px; font-weight: 600;">
              ${severity.toUpperCase()}
            </span>
            <span style="background: #667eea; color: white; padding: 6px 12px; border-radius: 20px; font-size: 12px; font-weight: 600;">
              ${error.type.toUpperCase()}
            </span>
          </div>
          <span style="color: #666; font-size: 14px;">${date}</span>
        </div>
        <div class="error-message" style="margin-bottom: 15px; font-weight: 600; color: #333;">
          ${escapeHtml(error.message)}
        </div>
        <div class="error-details" style="font-size: 14px; color: #666;">
          <div style="margin-bottom: 8px;"><strong>URL:</strong> ${escapeHtml(error.url || '–ù–µ —É–∫–∞–∑–∞–Ω')}</div>
          <div style="margin-bottom: 8px;"><strong>–°–µ—Å—Å–∏—è:</strong> ${error.sessionId || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</div>
          ${error.filename ? `<div style="margin-bottom: 8px;"><strong>–§–∞–π–ª:</strong> ${escapeHtml(error.filename)}:${error.lineno || '?'}:${error.colno || '?'}</div>` : ''}
          ${error.stack ? `<div style="margin-bottom: 8px;"><strong>Stack:</strong> <pre style="background: #f8f9fa; padding: 10px; border-radius: 4px; font-size: 12px; overflow-x: auto;">${escapeHtml(error.stack)}</pre></div>` : ''}
        </div>
      </div>
    `;
  });
  
  container.innerHTML = errorsHTML;
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏
function getErrorSeverity(error) {
  if (error.type === 'javascript' && error.message.includes('Cannot read property')) {
    return 'high';
  }
  if (error.type === 'fetch' && error.status >= 500) {
    return 'high';
  }
  if (error.type === 'promise') {
    return 'medium';
  }
  return 'low';
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –≤–∞–∂–Ω–æ—Å—Ç–∏
function getSeverityColor(severity) {
  switch (severity) {
    case 'high': return '#ff6b6b';
    case 'medium': return '#feca57';
    case 'low': return '#00b894';
    default: return '#6c757d';
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫
function updateErrorsStats(stats) {
  document.getElementById('total-errors').textContent = stats.total || 0;
  document.getElementById('today-errors').textContent = stats.today || 0;
  document.getElementById('unique-sessions').textContent = stats.uniqueSessions || 0;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
function updateErrorsCount(count) {
  document.getElementById('errors-count').textContent = `–ü–æ–∫–∞–∑–∞–Ω–æ: ${count} –æ—à–∏–±–æ–∫`;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –æ—à–∏–±–æ–∫
function showErrorsPlaceholder() {
  const container = document.getElementById('errors-container');
  if (!container) return;
  
  container.innerHTML = `
    <div style="text-align: center; padding: 40px; color: #666;">
      <i class="fas fa-exclamation-triangle" style="font-size: 48px; margin-bottom: 20px; color: #ff6b6b;"></i>
      <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
      <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –æ—à–∏–±–∫–∏</p>
    </div>
  `;
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –æ—à–∏–±–∫–∞–º
function applyErrorFilters() {
  const typeFilter = document.getElementById('error-type-filter').value;
  const severityFilter = document.getElementById('error-severity-filter').value;
  
  let filteredErrors = allClientErrors || [];
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É
  if (typeFilter) {
    filteredErrors = filteredErrors.filter(error => 
      error.type === typeFilter
    );
  }
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
  if (severityFilter) {
    filteredErrors = filteredErrors.filter(error => 
      getErrorSeverity(error) === severityFilter
    );
  }
  
  console.log(`–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã –æ—à–∏–±–æ–∫. –ü–æ–∫–∞–∑–∞–Ω–æ ${filteredErrors.length} –∏–∑ ${allClientErrors.length} –æ—à–∏–±–æ–∫`);
  updateErrorsDisplay(filteredErrors);
  updateErrorsCount(filteredErrors.length);
}

// –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—à–∏–±–æ–∫
function clearErrorFilters() {
  document.getElementById('error-type-filter').value = '';
  document.getElementById('error-severity-filter').value = '';
  
  console.log('–§–∏–ª—å—Ç—Ä—ã –æ—à–∏–±–æ–∫ —Å–±—Ä–æ—à–µ–Ω—ã. –ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –æ—à–∏–±–∫–∏');
  updateErrorsDisplay(allClientErrors);
  updateErrorsCount(allClientErrors.length);
}

// –≠–∫—Å–ø–æ—Ä—Ç –æ—à–∏–±–æ–∫ –≤ CSV
function exportErrorsToCSV() {
  const typeFilter = document.getElementById('error-type-filter').value;
  const severityFilter = document.getElementById('error-severity-filter').value;
  
  let errorsToExport = allClientErrors || [];
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ –∂–µ —Ñ–∏–ª—å—Ç—Ä—ã
  if (typeFilter) {
    errorsToExport = errorsToExport.filter(error => 
      error.type === typeFilter
    );
  }
  
  if (severityFilter) {
    errorsToExport = errorsToExport.filter(error => 
      getErrorSeverity(error) === severityFilter
    );
  }
  
  if (errorsToExport.length === 0) {
    alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º CSV –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const headers = [
    '–î–∞—Ç–∞',
    '–¢–∏–ø',
    '–í–∞–∂–Ω–æ—Å—Ç—å',
    '–°–æ–æ–±—â–µ–Ω–∏–µ',
    'URL',
    '–°–µ—Å—Å–∏—è',
    '–§–∞–π–ª',
    '–°—Ç—Ä–æ–∫–∞',
    '–ö–æ–ª–æ–Ω–∫–∞',
    'Stack Trace'
  ];
  
  // –°–æ–∑–¥–∞–µ–º CSV –¥–∞–Ω–Ω—ã–µ
  const csvData = errorsToExport.map(error => [
    new Date(error.timestamp).toLocaleString('ru-RU'),
    error.type,
    getErrorSeverity(error),
    `"${error.message.replace(/"/g, '""')}"`,
    `"${(error.url || '').replace(/"/g, '""')}"`,
    error.sessionId || '',
    `"${(error.filename || '').replace(/"/g, '""')}"`,
    error.lineno || '',
    error.colno || '',
    `"${(error.stack || '').replace(/"/g, '""')}"`
  ]);
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ
  const csvContent = [headers, ...csvData]
    .map(row => row.join(','))
    .join('\n');
  
  // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
  const blob = new Blob(['\ufeff' + csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', `client_errors_${new Date().toISOString().split('T')[0]}.csv`);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

// –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤ initializePanel()