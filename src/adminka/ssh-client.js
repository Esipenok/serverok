const { NodeSSH } = require('node-ssh');
const path = require('path');

class SSHClient {
    constructor() {
        this.ssh = new NodeSSH();
        this.isConnected = false;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∫–ª—é—á—É
        // –í Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const isDocker = process.env.NODE_ENV === 'production' || process.env.DOCKER_ENV || process.env.HOSTNAME;
        const keyPath = isDocker ? '/app/keys/deploy_key' : '/root/adminka/keys/deploy_key';
        
        this.config = {
            host: '46.62.131.90',
            username: 'root',
            privateKeyPath: keyPath,
            password: null
        };
        
        console.log('üîë SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', {
            host: this.config.host,
            username: this.config.username,
            privateKeyPath: this.config.privateKeyPath,
            isDocker: isDocker,
            NODE_ENV: process.env.NODE_ENV,
            DOCKER_ENV: process.env.DOCKER_ENV,
            HOSTNAME: process.env.HOSTNAME
        });
    }

    async connect() {
        try {
            if (this.isConnected) {
                return true;
            }

            console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SSH —Å–µ—Ä–≤–µ—Ä—É...');
            
            await this.ssh.connect({
                host: this.config.host,
                username: this.config.username,
                privateKeyPath: this.config.privateKeyPath
            });

            this.isConnected = true;
            console.log('SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
            this.isConnected = false;
            return false;
        }
    }

    async disconnect() {
        if (this.isConnected) {
            this.ssh.dispose();
            this.isConnected = false;
            console.log('SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        }
    }

    async executeCommand(command) {
        try {
            if (!this.isConnected) {
                const connected = await this.connect();
                if (!connected) {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ SSH');
                }
            }

            console.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: ${command}`);
            const result = await this.ssh.execCommand(command);
            
            if (result.stderr) {
                console.warn('SSH stderr:', result.stderr);
            }

            return {
                success: result.code === 0,
                stdout: result.stdout,
                stderr: result.stderr,
                code: result.code
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SSH –∫–æ–º–∞–Ω–¥—ã:', error);
            return {
                success: false,
                stdout: '',
                stderr: error.message,
                code: -1
            };
        }
    }

    async getDockerStatus() {
        const result = await this.executeCommand('docker ps -a --format "{{.Names}}\t{{.Status}}\t{{.Ports}}"');
        
        if (!result.success) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Docker: ${result.stderr}`);
        }

        const lines = result.stdout.trim().split('\n');
        // –ë–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, —Å—Ä–∞–∑—É –ø–∞—Ä—Å–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
        const containers = lines.map(line => {
            const parts = line.split('\t');
            return {
                name: parts[0] || '',
                status: parts[1] || '',
                ports: parts[2] || ''
            };
        });

        return containers;
    }

    async getSystemInfo() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ CPU
            const cpuResult = await this.executeCommand('top -bn1 | grep "Cpu(s)" | sed "s/.*, *\\([0-9.]*\\)%* id.*/\\1/" | awk \'{print 100 - $1}\'');
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏
            const memResult = await this.executeCommand('free -m | grep Mem');
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ
            const diskResult = await this.executeCommand('df -h / | tail -1');

            // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ (–≤ –±–∞–π—Ç–∞—Ö)
            const diskBytesResult = await this.executeCommand('df / | tail -1');

            const cpuUsage = parseFloat(cpuResult.stdout.trim()) || 0;
            
            // –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏
            const memParts = memResult.stdout.trim().split(/\s+/);
            const totalMem = parseInt(memParts[1]) || 0;
            const usedMem = parseInt(memParts[2]) || 0;
            const freeMem = parseInt(memParts[3]) || 0;
            const memUsagePercent = totalMem > 0 ? ((usedMem / totalMem) * 100).toFixed(2) : 0;

            // –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ
            const diskParts = diskResult.stdout.trim().split(/\s+/);
            const diskUsagePercent = diskParts[4] ? parseInt(diskParts[4].replace('%', '')) : 0;

            // –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ –≤ –±–∞–π—Ç–∞—Ö
            const diskBytesParts = diskBytesResult.stdout.trim().split(/\s+/);
            const totalDiskBytes = parseInt(diskBytesParts[1]) * 1024 || 0; // –≤ –±–∞–π—Ç–∞—Ö
            const usedDiskBytes = parseInt(diskBytesParts[2]) * 1024 || 0; // –≤ –±–∞–π—Ç–∞—Ö
            const freeDiskBytes = parseInt(diskBytesParts[3]) * 1024 || 0; // –≤ –±–∞–π—Ç–∞—Ö

            return {
                cpu: {
                    load: cpuUsage,
                    cores: await this.getCPUCount()
                },
                memory: {
                    total: totalMem * 1024 * 1024, // –≤ –±–∞–π—Ç–∞—Ö
                    used: usedMem * 1024 * 1024,
                    free: freeMem * 1024 * 1024,
                    usedPercent: parseFloat(memUsagePercent)
                },
                disk: [{
                    fs: '/',
                    size: diskParts[1] || '0',
                    used: diskParts[2] || '0',
                    usedPercent: diskUsagePercent,
                    totalBytes: totalDiskBytes,
                    usedBytes: usedDiskBytes,
                    freeBytes: freeDiskBytes
                }]
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    async getCPUCount() {
        try {
            const result = await this.executeCommand('nproc');
            return parseInt(result.stdout.trim()) || 1;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ CPU:', error);
            return 1;
        }
    }

    async getServerStatus() {
        try {
            const [dockerStatus, systemInfo] = await Promise.all([
                this.getDockerStatus(),
                this.getSystemInfo()
            ]);

            return {
                timestamp: new Date().toISOString(),
                docker: {
                    containers: dockerStatus
                },
                system: systemInfo
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
            throw error;
        }
    }

    async testConnection() {
        try {
            const result = await this.executeCommand('echo "SSH connection test successful"');
            return result.success;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
            return false;
        }
    }
}

module.exports = SSHClient; 