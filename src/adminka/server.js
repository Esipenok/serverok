const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const path = require('path');
const http = require('http');
const https = require('https');
const fs = require('fs');
const socketIo = require('socket.io');
const cron = require('node-cron');
const SSHClient = require('./ssh-client');
const StatsManager = require('./stats-manager');
const AnalyticsManager = require('./analytics/analytics-manager');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

// Middleware –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è HTTP –Ω–∞ HTTPS –≤ production
const redirectToHttps = (req, res, next) => {
  const isSecure = req.secure || req.headers['x-forwarded-proto'] === 'https';
  
  if (!isSecure && process.env.NODE_ENV === 'production') {
    const host = req.headers.host;
    const httpsPort = '3443';
    return res.redirect(301, `https://${host.split(':')[0]}:${httpsPort}${req.originalUrl}`);
  }
  
  next();
};

// Middleware —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º CSP –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
app.use(helmet({
  contentSecurityPolicy: false,
  crossOriginEmbedderPolicy: false,
  crossOriginOpenerPolicy: false,
  crossOriginResourcePolicy: false,
  originAgentCluster: false
}));
app.use(cors());
app.use(morgan('combined'));
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ HTTPS –≤ production —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
if (process.env.NODE_ENV === 'production') {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
  try {
    fs.accessSync(path.join(__dirname, '../src/ssl', 'privkey.pem'));
    app.use(redirectToHttps);
    console.log('‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, HTTPS —Ä–µ–¥–∏—Ä–µ–∫—Ç –≤–∫–ª—é—á–µ–Ω');
  } catch (error) {
    console.log('‚ö†Ô∏è  SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, HTTPS —Ä–µ–¥–∏—Ä–µ–∫—Ç –æ—Ç–∫–ª—é—á–µ–Ω');
  }
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const PORT = process.env.PORT || 3001;
const MAIN_APP_URL = process.env.MAIN_APP_URL || 'http://46.62.131.90:3000';
const ADMIN_USERNAME = process.env.ADMIN_USERNAME || 'admin';
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || 'qwe';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SSH –∫–ª–∏–µ–Ω—Ç–∞ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const sshClient = new SSHClient();
const statsManager = new StatsManager();
const analyticsManager = new AnalyticsManager();

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const checkAuth = (req, res, next) => {
  const username = req.headers['x-admin-username'] || req.query.username;
  const password = req.headers['x-admin-password'] || req.query.password;
  
  console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:');
  console.log('  - –ü–æ–ª—É—á–µ–Ω–Ω—ã–π username:', username);
  console.log('  - –ü–æ–ª—É—á–µ–Ω–Ω—ã–π password:', password ? '***' : '–Ω–µ —É–∫–∞–∑–∞–Ω');
  console.log('  - –û–∂–∏–¥–∞–µ–º—ã–π username:', ADMIN_USERNAME);
  console.log('  - –û–∂–∏–¥–∞–µ–º—ã–π password:', ADMIN_PASSWORD);
  console.log('  - Headers:', req.headers);
  console.log('  - Query:', req.query);
  
  if (username !== ADMIN_USERNAME || password !== ADMIN_PASSWORD) {
    console.log('‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å!');
    console.log('  - Username —Å–æ–≤–ø–∞–¥–∞–µ—Ç:', username === ADMIN_USERNAME);
    console.log('  - Password —Å–æ–≤–ø–∞–¥–∞–µ—Ç:', password === ADMIN_PASSWORD);
    return res.status(401).json({ 
      error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
      debug: {
        receivedUsername: username,
        receivedPassword: password ? '***' : '–Ω–µ —É–∫–∞–∑–∞–Ω',
        expectedUsername: ADMIN_USERNAME,
        usernameMatch: username === ADMIN_USERNAME,
        passwordMatch: password === ADMIN_PASSWORD
      }
    });
  }
  
  console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
  next();
};

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/api/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.get('/api/auth-debug', (req, res) => {
  console.log('üîç –ó–∞–ø—Ä–æ—Å –æ—Ç–ª–∞–¥–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
  console.log('  - Headers:', req.headers);
  console.log('  - Query:', req.query);
  console.log('  - Body:', req.body);
  
  res.json({
    message: '–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
    environment: {
      ADMIN_USERNAME: ADMIN_USERNAME,
      ADMIN_PASSWORD: ADMIN_PASSWORD ? '***' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
      NODE_ENV: process.env.NODE_ENV,
      PORT: process.env.PORT
    },
    request: {
      headers: req.headers,
      query: req.query,
      body: req.body
    },
    timestamp: new Date().toISOString()
  });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
app.get('/api/ssh-test', checkAuth, async (req, res) => {
  try {
    const isConnected = await sshClient.testConnection();
    res.json({ 
      success: isConnected, 
      message: isConnected ? 'SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç' : 'SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SSH:', error);
    res.status(500).json({ 
      success: false, 
      error: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SSH: ' + error.message 
    });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/stats', checkAuth, (req, res) => {
  try {
    const stats = statsManager.getStatsForCharts();
    // –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    if (!stats || Object.keys(stats).length === 0) {
      res.json({
        cpu: { labels: [], data: [] },
        memory: { labels: [], data: [] },
        disk: { labels: [], data: [] }
      });
    } else {
      res.json(stats);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/stats-summary', checkAuth, (req, res) => {
  try {
    const summary = statsManager.getSummaryStats();
    // –ï—Å–ª–∏ —Å–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    if (!summary || !summary.cpu) {
      res.json({
        cpu: { used: 25.5, free: 74.5 },
        memory: { used: 50.0, free: 50.0 },
        disk: { used: 50.0, free: 50.0 }
      });
    } else {
      res.json(summary);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/server-status', checkAuth, async (req, res) => {
  try {
    const status = await sshClient.getServerStatus();
    res.json(status);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–±
app.get('/api/complaints', checkAuth, async (req, res) => {
  try {
    const axios = require('axios');
    
    // –ü–æ–ª—É—á–∞–µ–º –∂–∞–ª–æ–±—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const response = await axios.get(`${MAIN_APP_URL}/api/complaints`, {
      headers: {
        'Authorization': `Bearer ${ADMIN_PASSWORD}`,
        'Content-Type': 'application/json'
      }
    });

    res.json(response.data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–±:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–ª–æ–±' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∂–∞–ª–æ–±
app.get('/api/all-complaints', checkAuth, async (req, res) => {
  try {
    const axios = require('axios');
    
    const response = await axios.get(`${MAIN_APP_URL}/api/complaints/all`, {
      headers: {
        'x-admin-password': ADMIN_PASSWORD,
        'Content-Type': 'application/json'
      }
    });

    res.json(response.data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∂–∞–ª–æ–±:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∂–∞–ª–æ–±' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∂–∞–ª–æ–±
app.get('/api/complaints-stats', checkAuth, async (req, res) => {
  try {
    const axios = require('axios');
    
    const response = await axios.get(`${MAIN_APP_URL}/api/complaints/stats`, {
      headers: {
        'x-admin-password': ADMIN_PASSWORD,
        'Content-Type': 'application/json'
      }
    });

    res.json(response.data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∂–∞–ª–æ–±:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∂–∞–ª–æ–±' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/server-logs', checkAuth, async (req, res) => {
  try {
    const { container = 'dating_app_server', lines = '100', follow = 'false' } = req.query;
    
    console.log(`–ó–∞–ø—Ä–æ—Å –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: ${container}, —Å—Ç—Ä–æ–∫: ${lines}, follow: ${follow}`);
    
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
    let command = `docker logs ${container} --tail ${lines}`;
    
    if (follow === 'true') {
      // –î–ª—è real-time –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ tail -f
      const tempFile = `/tmp/${container}_logs_${Date.now()}.log`;
      command = `docker logs ${container} --tail ${lines} > ${tempFile} && tail -f ${tempFile}`;
    }
    
    const result = await sshClient.executeCommand(command);
    
    if (result.success) {
      res.json({
        success: true,
        logs: result.stdout,
        container: container,
        timestamp: new Date().toISOString()
      });
    } else {
      res.status(500).json({
        success: false,
        error: result.stderr || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤',
        container: container
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    res.status(500).json({ 
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message 
    });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
app.get('/api/containers', checkAuth, async (req, res) => {
  try {
    const command = 'docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"';
    const result = await sshClient.executeCommand(command);
    
    if (result.success) {
      // –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ docker ps
      const lines = result.stdout.trim().split('\n');
      const containers = [];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      for (let i = 1; i < lines.length; i++) {
        const line = lines[i].trim();
        if (line) {
          const parts = line.split(/\s+/);
          if (parts.length >= 2) {
            containers.push({
              name: parts[0],
              status: parts.slice(1, -1).join(' '),
              ports: parts[parts.length - 1]
            });
          }
        }
      }
      
      res.json({
        success: true,
        containers: containers
      });
    } else {
      res.status(500).json({
        success: false,
        error: result.stderr || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤'
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:', error);
    res.status(500).json({ 
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: ' + error.message 
    });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–±–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
app.post('/api/client-errors', (req, res) => {
  try {
    const error = req.body;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    error.serverTimestamp = new Date().toISOString();
    error.ip = req.ip || req.connection.remoteAddress;
    error.userAgent = req.headers['user-agent'];
    
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    console.error('üî¥ –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ—à–∏–±–∫–∞:', {
      type: error.type,
      message: error.message,
      url: error.url,
      timestamp: error.timestamp,
      sessionId: error.sessionId
    });
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—à–∏–±–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ–∞–π–ª
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    
    res.json({ success: true, message: '–û—à–∏–±–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –æ—à–∏–±–∫–∏:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
app.get('/api/client-errors', checkAuth, (req, res) => {
  try {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—à–∏–±–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    res.json({
      success: true,
      errors: [],
      stats: {
        total: 0,
        byType: {},
        byHour: {}
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ—à–∏–±–æ–∫:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—à–∏–±–æ–∫' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
app.post('/api/performance-metrics', (req, res) => {
  try {
    const metrics = req.body;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    metrics.forEach(metric => {
      metric.serverTimestamp = new Date().toISOString();
      metric.ip = req.ip || req.connection.remoteAddress;
    });
    
    // –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ (–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
    console.log('üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', {
      count: metrics.length,
      types: [...new Set(metrics.map(m => m.type))],
      timestamp: new Date().toISOString()
    });
    
    res.json({ success: true, message: '–ú–µ—Ç—Ä–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
app.get('/api/performance-metrics', checkAuth, (req, res) => {
  try {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    res.json({
      success: true,
      metrics: [],
      stats: {
        total: 0,
        byType: {},
        averagePageLoad: 0,
        averageNetworkRequest: 0,
        memoryUsage: 0
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫' });
  }
});

// ===== –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ï API =====

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
app.post('/api/analytics/events', (req, res) => {
  try {
    const events = req.body;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –º–µ–Ω–µ–¥–∂–µ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    analyticsManager.addEvents(events);
    
    console.log('üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è:', {
      count: events.length,
      events: events.map(e => e.event_name),
      timestamp: new Date().toISOString()
    });
    
    res.json({ success: true, message: '–°–æ–±—ã—Ç–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫
app.get('/api/analytics/stats', checkAuth, (req, res) => {
  try {
    const stats = analyticsManager.getStats();
    res.json({
      success: true,
      stats: stats
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
app.get('/api/analytics/events', checkAuth, (req, res) => {
  try {
    const { limit = 100, offset = 0, event_name, user_id, session_id, date_from, date_to } = req.query;
    
    let events;
    if (event_name || user_id || session_id || date_from || date_to) {
      // –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
      const filters = { event_name, user_id, session_id, date_from, date_to };
      events = analyticsManager.getFilteredEvents(filters);
    } else {
      // –í—Å–µ —Å–æ–±—ã—Ç–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
      events = analyticsManager.getEvents(parseInt(limit), parseInt(offset));
    }
    
    res.json({
      success: true,
      events: events,
      total: analyticsManager.events.length
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
app.get('/api/analytics/export', checkAuth, (req, res) => {
  try {
    const { format = 'json' } = req.query;
    const data = analyticsManager.exportData(format);
    
    if (format === 'csv') {
      res.setHeader('Content-Type', 'text/csv');
      res.setHeader('Content-Disposition', `attachment; filename="analytics_${new Date().toISOString().split('T')[0]}.csv"`);
    } else {
      res.setHeader('Content-Type', 'application/json');
      res.setHeader('Content-Disposition', `attachment; filename="analytics_${new Date().toISOString().split('T')[0]}.json"`);
    }
    
    res.send(data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
app.post('/api/analytics/cleanup', checkAuth, (req, res) => {
  try {
    const { days = 30 } = req.body;
    analyticsManager.cleanup(parseInt(days));
    
    res.json({
      success: true,
      message: `–û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ ${days} –¥–Ω–µ–π`
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏' });
  }
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
app.post('/api/docker-action', checkAuth, async (req, res) => {
  try {
    const { name, action } = req.body;
    const allowedActions = ['start', 'stop', 'restart'];
    if (!name || !allowedActions.includes(action)) {
      return res.status(400).json({ success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' });
    }
    const cmd = `docker ${action} ${name}`;
    const result = await sshClient.executeCommand(cmd);
    if (result.success) {
      res.json({ success: true });
    } else {
      res.status(500).json({ success: false, error: result.stderr || '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã' });
    }
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
app.post('/api/docker-start-all', checkAuth, async (req, res) => {
  try {
    console.log('–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    const listCmd = 'docker ps -a --format "{{.Names}}"';
    const listResult = await sshClient.executeCommand(listCmd);
    
    if (!listResult.success) {
      return res.status(500).json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: ' + listResult.stderr 
      });
    }
    
    const containers = listResult.stdout.trim().split('\n').filter(name => name.trim());
    console.log('–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:', containers.length);
    console.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:', containers);
    
    if (containers.length === 0) {
      return res.json({ 
        success: true, 
        message: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        started: 0,
        total: 0
      });
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const results = [];
    let successCount = 0;
    
    for (const containerName of containers) {
      try {
        console.log(`–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: ${containerName}`);
        const startCmd = `docker start ${containerName}`;
        const result = await sshClient.executeCommand(startCmd);
        
        if (result.success) {
          successCount++;
          results.push({ container: containerName, status: 'success' });
          console.log(`‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${containerName} –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
        } else {
          results.push({ 
            container: containerName, 
            status: 'error', 
            error: result.stderr || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' 
          });
          console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ${containerName}:`, result.stderr);
        }
      } catch (error) {
        results.push({ 
          container: containerName, 
          status: 'error', 
          error: error.message 
        });
        console.log(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ${containerName}:`, error.message);
      }
    }
    
    console.log(`–ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –£—Å–ø–µ—à–Ω–æ: ${successCount}/${containers.length}`);
    
    res.json({
      success: true,
      message: `–ó–∞–ø—É—â–µ–Ω–æ ${successCount} –∏–∑ ${containers.length} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤`,
      started: successCount,
      total: containers.length,
      results: results
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:', error);
    res.status(500).json({ 
      success: false, 
      error: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: ' + error.message 
    });
  }
});

// WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
io.on('connection', (socket) => {
  console.log('–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏');
  
  socket.on('disconnect', () => {
    console.log('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏');
  });
});

// Cron –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
cron.schedule('* * * * *', async () => {
  try {
    const serverStatus = await sshClient.getServerStatus();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    statsManager.addDataPoint(serverStatus.timestamp, serverStatus.system);
    
    const statusData = {
      timestamp: serverStatus.timestamp,
      system: serverStatus.system
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    io.emit('server-status-update', statusData);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = statsManager.getStatsForCharts();
    io.emit('stats-update', stats);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
  }
});

// Cron –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–π —á–∞—Å
cron.schedule('0 * * * *', () => {
  statsManager.cleanup();
  console.log('–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (process.env.NODE_ENV === 'production') {
  try {
    // –ü—É—Ç—å –∫ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ, —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä)
    const privateKey = fs.readFileSync(path.join(__dirname, '../src/ssl', 'privkey.pem'), 'utf8');
    const certificate = fs.readFileSync(path.join(__dirname, '../src/ssl', 'cert.pem'), 'utf8');
    const ca = fs.readFileSync(path.join(__dirname, '../src/ssl', 'chain.pem'), 'utf8');

    const credentials = {
      key: privateKey,
      cert: certificate,
      ca: ca
    };

    // –°–æ–∑–¥–∞–Ω–∏–µ HTTPS —Å–µ—Ä–≤–µ—Ä–∞
    const httpsServer = https.createServer(credentials, app);
    const httpsIo = socketIo(httpsServer, {
      cors: {
        origin: "*",
        methods: ["GET", "POST"]
      }
    });

    // –ö–æ–ø–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ WebSocket
    httpsIo.on('connection', (socket) => {
      console.log('HTTPS –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏');
      
      socket.on('disconnect', () => {
        console.log('HTTPS –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏');
      });
    });

    // –ó–∞–ø—É—Å–∫ HTTPS —Å–µ—Ä–≤–µ—Ä–∞
    httpsServer.listen(3443, () => {
      console.log(`HTTPS –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—É 3443`);
      console.log(`–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: https://localhost:3443`);
      console.log(`SSH —Å–µ—Ä–≤–µ—Ä: ${sshClient.config.host}`);
    });

    // HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ HTTPS
    server.listen(PORT, () => {
      console.log(`HTTP –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT} (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ HTTPS)`);
    });
  } catch (error) {
    console.error(`SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º HTTP –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}: ${error.message}`);
    // –ï—Å–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
    server.listen(PORT, () => {
      console.log(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
      console.log(`SSH —Å–µ—Ä–≤–µ—Ä: ${sshClient.config.host}`);
    });
  }
} else {
  // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ HTTP
  server.listen(PORT, () => {
    console.log(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
    console.log(`SSH —Å–µ—Ä–≤–µ—Ä: ${sshClient.config.host}`);
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.on('SIGINT', async () => {
  console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
  await sshClient.disconnect();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
  await sshClient.disconnect();
  process.exit(0);
}); 